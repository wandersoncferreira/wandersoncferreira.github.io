<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>architecture on Bartuka</title>
    <link>https://wandersoncferreira.github.io/tags/architecture/</link>
    <description>Recent content in architecture on Bartuka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Dec 2019 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://wandersoncferreira.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making Architecture Matter</title>
      <link>https://wandersoncferreira.github.io/notes/make-architecture-matter/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/make-architecture-matter/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubedngazywmgr0&#34;&gt;&lt;a href=&#34;https://youtu.be/DngAZyWMGR0&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Martin Fowler, Chief Scientist at ThoughtWorks&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small keynote but with good ideas about software architecture. I
really like the work of Martin Fowler and his view over this problem,
I feel how hard it is to move at the speed that startups needs/desire
and keep good architecture choices around. The business domain is
constantly changing, priorities are crazy depending on the week and
the idea of losing the race because we can&amp;rsquo;t provide better solution
now instead of &amp;ldquo;so-so&amp;rdquo; solutions is terrifying.&lt;/p&gt;
&lt;p&gt;Maybe this environment is just doomed to be re-written if the company
turns out successful. Internal quality is hard to be taken into
consideration specially when even high-quality workers are so scarce
in the market.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Expert developers&amp;rsquo; shared understandinf of the system design is
architecture&lt;/p&gt;
&lt;p&gt;The set of design decisions that you wish you could get right early on&lt;/p&gt;
&lt;p&gt;Architecture is a social thing&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What you want to do, when project grows is that everybody has a
shared understanding&lt;/li&gt;
&lt;li&gt;What we consider to be the most important thing of the system?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://files.catwell.info/misc/mirror/2003-martin-fowler-who-needs-an-architect.pdf&#34;&gt;Who needs an
architect?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;Design Stamina Hypothesis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Kill &#39;Microservices&#39; before its too late</title>
      <link>https://wandersoncferreira.github.io/notes/kill-microservices/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/kill-microservices/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube-ukepd2ipek&#34;&gt;&lt;a href=&#34;https://youtu.be/-UKEPd2ipEk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Chad Fowler, CTO of Wunderlist&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;I want to build systems that will survive.&amp;rdquo; I also have this feeling
that software cannot last for long without turning into unmanageble
pile of code. Interesting to see different points of view, John
Ousterhout in his presentation about &lt;em&gt;software design&lt;/em&gt; provided us
with his point of view that &lt;em&gt;length&lt;/em&gt; of code base does not really
matter and &lt;em&gt;depth&lt;/em&gt; would be the main thing to look for.&lt;/p&gt;
&lt;p&gt;Chad is a proponent of &lt;em&gt;tiny components&lt;/em&gt;. They are not talking about
exactly the same thing, but it&amp;rsquo;s interesting to notice all this
&amp;ldquo;guidelines&amp;rdquo; that worked for me and probably are not going to work to
everybody.&lt;/p&gt;
&lt;p&gt;Some very contradictory points was made by Chad in this presentation,
but I sort of agree based on my current experience with some points,
specially about shared code and treating code as &amp;ldquo;permanent&amp;rdquo;-thing.&lt;/p&gt;
&lt;p&gt;I like the idea to write systems and plan code to be disposable.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The system is the asset, &lt;em&gt;code&lt;/em&gt; is a liability&lt;/p&gt;
&lt;p&gt;Mutability of the system is enhanced by immutability of its components&lt;/p&gt;
&lt;p&gt;Code that works and has never been modified is good code. (???)&lt;/p&gt;
&lt;p&gt;If it hurts, do it more often&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Throw away the system and start over.&lt;/li&gt;
&lt;li&gt;You should plan to throw code away.&lt;/li&gt;
&lt;li&gt;Radically heterogenous environment to not become stuck with preconditions&lt;/li&gt;
&lt;li&gt;No shared code&lt;/li&gt;
&lt;li&gt;Metrics vs Tests&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
  </channel>
</rss>
