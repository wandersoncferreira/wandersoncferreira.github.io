<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design on Bartuka</title>
    <link>https://wandersoncferreira.github.io/tags/design/</link>
    <description>Recent content in design on Bartuka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 May 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://wandersoncferreira.github.io/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>On Abstraction</title>
      <link>https://wandersoncferreira.github.io/notes/on-abstraction/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/on-abstraction/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubex9pxbnfc4aq&#34;&gt;&lt;a href=&#34;https://youtu.be/x9pxbnFC4aQ&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Difficult presentation because it deals with some very conceptual
topics, but Zach is very knowledgeable about his presentations there
are a lot of research behind it and we can tell how much effort he
made to deliver a good material and relevant.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The fundamental question of software is how do we deal with change&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I am going to watch this over and over, but I also need to read all
the material he suggested.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Abstraction&lt;/em&gt; maps the internal model onto external semantics.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;To think is to forget a difference, to generalize, to abstract. In
the overly replete world of Funes there were nothing but details,
almost contiguous details.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;An abstraction is useful only if its assumptions are sound&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If an abstraction can&amp;rsquo;t be discarded, it becomes coercive. What it
doesnt see might disapper.&lt;/p&gt;
&lt;p&gt;Software rould be easy, if it weren&amp;rsquo;t for changing environments. No
one tries to add a carwash to a bridge when it&amp;rsquo;s halfway built.&lt;/p&gt;
&lt;p&gt;Blind optimism isn&amp;rsquo;t a substitute for understanding.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Our models should be simplest thing that satisfices often enough&lt;/li&gt;
&lt;li&gt;When assumptions leak out, we have to use conventions&lt;/li&gt;
&lt;li&gt;Starting from scratch can be expensive&lt;/li&gt;
&lt;li&gt;Assumptions that &lt;em&gt;fail&lt;/em&gt; together &lt;em&gt;belong&lt;/em&gt; together&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The elements of clojure - by Zach Tellman&lt;/li&gt;
&lt;li&gt;Proof of Correctness of Data Representations - by Hoare&lt;/li&gt;
&lt;li&gt;The structure of scientific revolutions - by Thomas Kuhn&lt;/li&gt;
&lt;li&gt;The sciences of the Artificial - by Herbert A. Simon&lt;/li&gt;
&lt;li&gt;Funes the memorious - by Jorge Luis Borges&lt;/li&gt;
&lt;li&gt;Simulacra and Simulation - by Jean Baudrillard&lt;/li&gt;
&lt;li&gt;Seeing like a state - by James Scott&lt;/li&gt;
&lt;li&gt;Notes on the synthesis of form - by Christopher Alexander&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Maybe Not</title>
      <link>https://wandersoncferreira.github.io/notes/maybe-not/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/maybe-not/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeyr5wdgrpouglistplzdclr02grlrewkazv-5qbuzk0zgkoocr&#34;&gt;&lt;a href=&#34;https://youtu.be/YR5WdGrpoug?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;I call it my billion-dollar mistake. It was the invention of the null
reference in 1965 - by Tony Hoare.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Where are nulls/options used?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optional requirements (args)
&lt;ul&gt;
&lt;li&gt;variadics and kwargs mitigate in Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;conditional provision (returns)
&lt;ul&gt;
&lt;li&gt;managing partial information (aggregates)&lt;/li&gt;
&lt;li&gt;not idiomatic in Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Maps vs Records/Fields&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maps are (mathematical) functions!&lt;/li&gt;
&lt;li&gt;simplest functions in programming
&lt;ul&gt;
&lt;li&gt;keyset -&amp;gt; vals&lt;/li&gt;
&lt;li&gt;no code, no categories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What do we want?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maximize schema reuse
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t want context-driven proliferation
&lt;ul&gt;
&lt;li&gt;yields more code, less reuse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;support symmetric request/response
&lt;ul&gt;
&lt;li&gt;call partially filled in, get more filled in&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;information-building pipelines
&lt;ul&gt;
&lt;li&gt;many partial information increments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Maps are the most fundamental functions in programming&lt;/li&gt;
&lt;li&gt;You can flow information through systems that they doesn&amp;rsquo;t know
about and doesn&amp;rsquo;t care about it.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The Joys and Perils of Interactice Development</title>
      <link>https://wandersoncferreira.github.io/notes/joys-and-perils/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/joys-and-perils/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube-rafcpniyco&#34;&gt;&lt;a href=&#34;https://youtu.be/-RaFcpNiYCo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Sierra, consultant&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Everybody that work with Clojure can relate to the problems described
by Stuart, however the REPL-driven development is just so good to have
around.&lt;/p&gt;
&lt;p&gt;We must improve our toolings around it.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;[Remote Agent] was written entirely in Common Lisp despite
unrelenting political pressure to move to C++.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;We were not out to win over the Lisp programmers; we were after the
C++ programmers. We managed to drag a lot of them about halfway to
Lisp.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Definitions (source code in files) != Definitions (in language
runtime)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Debugging a program running on a $100M piece of hardware that is 100
million miles away is an &lt;em&gt;interesting experience&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Having a &lt;em&gt;read-eval-print-loop&lt;/em&gt; running on the spacecraft proved
invaluable in finding and fixing the problem&amp;rdquo; - by Ron Garret.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When you redefine a macro, you must reload all the code that uses it&lt;/li&gt;
&lt;li&gt;The Remote Agent Experiment: Debugging Code from 60 million miles
away (Google Tech Talks) - by Ron Garret&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Design and Implementation of Bitemporal DBMS</title>
      <link>https://wandersoncferreira.github.io/notes/design-and-implementation-of-bitemporal-dbms/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-and-implementation-of-bitemporal-dbms/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeyjavsvygbuulistplethprqvx4a-c3kdrtxxwgrmemutl8apf&#34;&gt;&lt;a href=&#34;https://youtu.be/YjAVsvYGbuU?list=PLetHPRQvX4a-c3KDRTxxwGRmEMutL8Apf&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hákan Raberg, clojure developer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The amount of knowledge hidden in the world is incredible. Almost all
of these projects when explained makes me feel happy that I can grasp
the whole idea and I know I can understand the inner workings and
maybe start to contribute to some of these ideas.&lt;/p&gt;
&lt;p&gt;I would like to be more involved with very rigorous projects
like this one. One day!&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;A bitemporal table is a glorious structure&lt;/strong&gt;. It simultaneously
records the history of the enterprise, while also capturing the
sequence of record of that history.&amp;rdquo;&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transaction time&lt;/strong&gt;: may be implemented using transaction commit
times, and are system-generated and -supplied.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Valid time&lt;/strong&gt;: Is the time when the fact is true in the modeled
reality. Valid times are usually supplied by the user.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bitemporal time - slice queries&lt;/strong&gt;: takes as input two instants, a
valid-time and a transaction-time instant, and results in a snapshot
state of the information regarding the enterprise at that valid
time, as recorded in the database at that transaction time.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read more papers about computer science!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.cs.arizona.edu/~rts/tdbbook.pdf&#34;&gt;Developing Time-Oriented database applications in SQL&lt;/a&gt; - by Richard Snodgrass&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.arizona.edu/~rts/pubs/SIGMODRecordMarch94p52.pdf&#34;&gt;A consensus glossary of temporal database concepts&lt;/a&gt; - CS Jensen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs.ulb.ac.be/public/_media/teaching/infoh415/tempfeaturessql2011.pdf&#34;&gt;Temporal Features in SQL 2011&lt;/a&gt; - by Krishna&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Core Design Principles for Software Developers</title>
      <link>https://wandersoncferreira.github.io/notes/core-design-principles/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/core-design-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-videoshttpsyoutubellggo74uxmi&#34;&gt;&lt;a href=&#34;https://youtu.be/llGgO74uXMI&#34;&gt;Youtube Videos&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Venkat Subramaniam, Founder of Agile Developer, Inc.&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The presentations from Venkat are always interesting to watch. There
are several good guidelines to software development in general, but
also related to OOP with some principles like polymorphism and
open/close as good thing we should also strive for.&lt;/p&gt;
&lt;p&gt;Not sure about some peculiarities he seems to pay really attention
for, for example, DRY and IDE. However, I need to keep studying these
principles because I feel there are some good patterns here to be used
in other worlds as well.&lt;/p&gt;
&lt;p&gt;I will look for some exercises focusing the SOLID principles. Maybe
should be a good idea to go out for my current code and try to find
places where I already violate some of these principles.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Software is never written, it is always rewritten&lt;/p&gt;
&lt;p&gt;Keep it simple, stupid&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; keeps you focused&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; solves only real problem we know about&lt;/p&gt;
&lt;p&gt;Worst form of coupling - Inheritance&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Subject the design to changes along the way and see how it reacts
to it&lt;/li&gt;
&lt;li&gt;To create good design first step is let go of the ego&lt;/li&gt;
&lt;li&gt;Be unemotional&lt;/li&gt;
&lt;li&gt;Take time to review design and code&lt;/li&gt;
&lt;li&gt;You Are Not Gonna Neet It - Think YAGNI&lt;/li&gt;
&lt;li&gt;Try to see if you can remove coupling&lt;/li&gt;
&lt;li&gt;Focus on Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t comment what, instead comment why&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Making Architecture Matter</title>
      <link>https://wandersoncferreira.github.io/notes/make-architecture-matter/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/make-architecture-matter/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubedngazywmgr0&#34;&gt;&lt;a href=&#34;https://youtu.be/DngAZyWMGR0&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Martin Fowler, Chief Scientist at ThoughtWorks&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small keynote but with good ideas about software architecture. I
really like the work of Martin Fowler and his view over this problem,
I feel how hard it is to move at the speed that startups needs/desire
and keep good architecture choices around. The business domain is
constantly changing, priorities are crazy depending on the week and
the idea of losing the race because we can&amp;rsquo;t provide better solution
now instead of &amp;ldquo;so-so&amp;rdquo; solutions is terrifying.&lt;/p&gt;
&lt;p&gt;Maybe this environment is just doomed to be re-written if the company
turns out successful. Internal quality is hard to be taken into
consideration specially when even high-quality workers are so scarce
in the market.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Expert developers&amp;rsquo; shared understandinf of the system design is
architecture&lt;/p&gt;
&lt;p&gt;The set of design decisions that you wish you could get right early on&lt;/p&gt;
&lt;p&gt;Architecture is a social thing&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What you want to do, when project grows is that everybody has a
shared understanding&lt;/li&gt;
&lt;li&gt;What we consider to be the most important thing of the system?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://files.catwell.info/misc/mirror/2003-martin-fowler-who-needs-an-architect.pdf&#34;&gt;Who needs an
architect?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;Design Stamina Hypothesis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>SOLID Principles of Object Oriented &amp; Agile Design</title>
      <link>https://wandersoncferreira.github.io/notes/solid-principles/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/solid-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeqhnlmvdxgty&#34;&gt;&lt;a href=&#34;https://youtu.be/QHnLmvDxGTY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Robert &amp;ldquo;Uncle Bob&amp;rdquo; Martin&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I might be walking into undesirable path here, but every presentation
I saw from Uncle Bob was bad. I have to say that, I&amp;rsquo;m now saying that
there is no wisdom in these talks but only that I have to filter so
much unrelated and trivias that makes it difficult and most of the
times boring.&lt;/p&gt;
&lt;p&gt;I like presentations like Linus names his functions: short, sweet and
to the point.&lt;/p&gt;
&lt;p&gt;OO is about managing dependencies so you can prevent fragility and
rigidity&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The ultimate failure of a software developer is when the &lt;em&gt;business&lt;/em&gt;
prohibits you to make changes to a specific module in the system.&lt;/p&gt;
&lt;p&gt;Three magic words of OO: Encapsulation, Inherintance and Polymorphism&lt;/p&gt;
&lt;h2 id=&#34;principles&#34;&gt;Principles&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;ingle Responsibility: a class should have one single reason to change&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;pen/Closed: modules should be open for extension but closed for modification&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;iskov Substitution: derived classes must be usable through the base class interface&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;nterface segregation: clients should not be forced to depend upon interfaces that they do not use&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;ependency inversion: high-level modules, which provide complex logic, should not depend on low-level modules, which provides utility features. Both should depend on abstractions.&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You don&amp;rsquo;t get fast by written crap&lt;/li&gt;
&lt;li&gt;Inherintance is used in dynamic languages to inherint behaviors
from others&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;extra-links&#34;&gt;Extra links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackify.com/solid-design-principles/&#34;&gt;Solid Design Principles Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>A Philosophy of Software Design</title>
      <link>https://wandersoncferreira.github.io/notes/philosophy-software-design/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/philosophy-software-design/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubebmsaylu0ncylistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/bmSAYlu0NcY?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;John Ousterhout, Professor at Stanford&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I already read this book two times and probably I will do many more,
the idea of teaching design to people is very interesting. I like the
idea that software development is in most aspects related to creative
work like painting and music. Specially, the design phase is really
difficult to master and probably to teach as well.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Working code is not enough&lt;/p&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://extras.springer.com/2002/978-3-642-63970-8/DVD3/rom/pdf/Parnas_new.pdf&#34;&gt;On the Criteria to be Used in Decomposing Systems into Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You need to practice! A lot!&lt;/li&gt;
&lt;li&gt;Define semantics to eliminate exceptions. Minimize the
number of places to handle exceptions&lt;/li&gt;
&lt;li&gt;Try to find big abstraction! Depth is more important than length&lt;/li&gt;
&lt;li&gt;Classes should be deep! Information hiding is good&lt;/li&gt;
&lt;li&gt;Error that people make the most: too many, too small, too shallow classes&lt;/li&gt;
&lt;li&gt;You should make the common case, really really easy&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Design, composition, and performance</title>
      <link>https://wandersoncferreira.github.io/notes/design-composition/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-composition/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubemcz3ygeeupglistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/MCZ3YgeEUPg?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, Creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I am currently working in a greenfield project and I will take some
step down and make sure I have all the pieces in place to move
forward. I&amp;rsquo;ve being doing a lot of work to take things apart in this
project, but I need a big picture to address things like
comprehension, coordination, extension, reuse, testing, and
efficiency.&lt;/p&gt;
&lt;p&gt;I have a profound simpathy for this talk because I often engaged in
discussions with colleagues about the situation of practice &lt;em&gt;before&lt;/em&gt;
work in software development. I came from the geophysics industry and
before you touch any equipment or data, you have to be subjected to
tons of training and simulations. Why people learn to code in
production time? I think the problem is even worse because most
managers do not even know that this situation happens, they think that
the team is ready to solve anything. This is scary.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In order to be creative you have to know how to prepare to be creative&lt;/li&gt;
&lt;li&gt;Separating into things that can be composed&lt;/li&gt;
&lt;li&gt;Move from want/need to &lt;em&gt;problems&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Take apart time/order/flow using queues, idempotency, commutation, transactions&lt;/li&gt;
&lt;li&gt;Composition you usually have self-imposed problems/constrains&lt;/li&gt;
&lt;li&gt;Beginners are not yet players&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;+Design+: &lt;em&gt;to prepare the plans for (a work to be executed),
especially to plan the form and structure of&lt;/em&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Design after agile, how to succed by trying less</title>
      <link>https://wandersoncferreira.github.io/notes/design-after-agile/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-after-agile/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubege_s55uvpyglistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/GE_s55Uvpyg?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I still create several diagrams about portion of my code. After I
discovered &lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; all my diagrams are plain
text files that create the figures as I compile in Emacs, you can even
render on github/gitlab issue tickets &amp;amp; PR&amp;rsquo;s. However, I still need to
be more dilligent to reach these files &lt;em&gt;before&lt;/em&gt; going to
code. Sometimes I find that experimenting with real code helps me to
see clearer and sometimes is just waste of time. Life is hard, right?&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;plans&lt;/em&gt; are useless, but &lt;em&gt;planning&lt;/em&gt; is indispensable.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make diagrams&lt;/li&gt;
&lt;li&gt;Make tables&lt;/li&gt;
&lt;li&gt;Write prose&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
  </channel>
</rss>
