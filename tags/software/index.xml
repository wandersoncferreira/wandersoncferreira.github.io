<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on Bartuka</title>
    <link>https://wandersoncferreira.github.io/tags/software/</link>
    <description>Recent content in software on Bartuka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jun 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://wandersoncferreira.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I see what you mean</title>
      <link>https://wandersoncferreira.github.io/notes/see-what-you-mean/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/see-what-you-mean/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutuber2aa4pivg0g&#34;&gt;&lt;a href=&#34;https://youtu.be/R2Aa4PivG0g&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Peter Alvado, UC Professor&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very nice presentation about declarative programming language.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Abstraction is sometimes harmful&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Operational semantics: the meaning of a program is what it does&lt;/p&gt;
&lt;p&gt;Model-theoretic semantics: the meaning of a program is the databases
that make it true&lt;/p&gt;
&lt;p&gt;What we want: Programs that are resilient to failure and tolerant of
loose ordering&lt;/p&gt;
&lt;p&gt;Why it is so hard: Too many possible behaviors.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Meanings are data representing outcomes. Outcomes are independent
of execution order.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Building senior Engineers</title>
      <link>https://wandersoncferreira.github.io/notes/building-senior-engineers/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/building-senior-engineers/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeirnnk5yx4qu&#34;&gt;&lt;a href=&#34;https://youtu.be/iRNnK5Yx4QU&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dalton Mitchell&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Given feedbacks is really hard. I am leading my team since 3 years ago
and I did tons of interviews, and I can say today that for our team
the culture fit was definetely the most important factor. We have
developed people to improve their tecnical side and sometime later
they became the MVP of their teams.&lt;/p&gt;
&lt;p&gt;This was great, and after sometime I started to have problems with my
HR team because I could not clearly communicate the values I was
&amp;ldquo;seeking&amp;rdquo;-for in the candidates and they were always asking me a list
of techonologies that the candidate must have. But truth be told, no
one knows Clojure in Brazil, 90% of our hires did not know it and we
actually rejected a nice technical clojure dev because of not good
alignment with the team.&lt;/p&gt;
&lt;p&gt;We were a &amp;ldquo;startup&amp;rdquo; and most of the environment is very very
high-paced, not well structured and very varying. You need to be ok of
putting a lot of effort in something and suddly one morning that
project is discontinued. It is shocking. Bad feeling. But it will
happen.&lt;/p&gt;
&lt;p&gt;What we did was to focus on the learning journey. Most of this dead
projected contributed to team knowledge of the domain and new ways to
solve our particular project. Proof of concepts in high speed with
high stakes.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;We&amp;rsquo;re looking for a more senior candidate&amp;rdquo; - Most feedback I got&lt;/p&gt;
&lt;p&gt;Look for these attributes: communication, curiousity, passion, determination&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: They won&amp;rsquo;t give up when things get tough.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: Rather than complain, they&amp;rsquo;ll propose solutions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: They&amp;rsquo;ll show empathy to others, and try to help when they struggle.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;High standards&lt;/li&gt;
&lt;li&gt;Focus on team impact&lt;/li&gt;
&lt;li&gt;Experience over head knowledge&lt;/li&gt;
&lt;li&gt;Be clear about that you value on your team&lt;/li&gt;
&lt;li&gt;Identify traits that actually matter&lt;/li&gt;
&lt;li&gt;Give useful feedback&lt;/li&gt;
&lt;li&gt;You received free, give gree.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>States and Nomads: Handling Software Complexity</title>
      <link>https://wandersoncferreira.github.io/notes/states-and-nomads/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/states-and-nomads/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubekgafci2unri&#34;&gt;&lt;a href=&#34;https://youtu.be/KGaFcI2UNrI&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Zach always provides a lot of references about amazing subjects, this
guy has a very scientific approach to software development and this is
great. I really believe we should take this road altogether.&lt;/p&gt;
&lt;p&gt;The choices you take when you build software depends on our knowledge
about the domain.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;We build systems that we can&amp;rsquo;t understand fully&lt;/p&gt;
&lt;p&gt;Heuristic devices don&amp;rsquo;t tell you when to stop. No abstraction
describes its own failures.&lt;/p&gt;
&lt;p&gt;The map is not the territory&lt;/p&gt;
&lt;p&gt;The Design Patterns book provides you the &amp;ldquo;blocks&amp;rdquo; about how you can
use to build solutions, however they do not talk about the environment
where your code is placed.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read from other areas about similar problems we face in software engineer&lt;/li&gt;
&lt;li&gt;Good planning is good planning&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;An introduction to General Systems Thinking - by Gerald. M. Weinberg&lt;/li&gt;
&lt;li&gt;A thousand plateaus&lt;/li&gt;
&lt;li&gt;Ficcoes - by Jorge Luis Borges&lt;/li&gt;
&lt;li&gt;A Pattern Language - by Christopher Alexander&lt;/li&gt;
&lt;li&gt;Patterns of Software - by Richard Gabriel&lt;/li&gt;
&lt;li&gt;Invisible Cities - by Calvino&lt;/li&gt;
&lt;li&gt;Data and Reality - by Kent&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>What went wrong with the IT-industry?</title>
      <link>https://wandersoncferreira.github.io/notes/what-went-wrong/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/what-went-wrong/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubegpp7bleg214&#34;&gt;&lt;a href=&#34;https://youtu.be/gPP7Bleg214&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;James Coplien, researcher in the field o computer science&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I should look for more papers in the area of software
development. Opinions are really what control the industry of software
development.&lt;/p&gt;
&lt;p&gt;The whole thing about agile methods, in the beginning, was about how
do you get the domain knowledge from your organization.&lt;/p&gt;
&lt;p&gt;One of the things I like about my current job is that I am able to get
better at domain knowledge, I am surrounded about great people that
think really different about how the credit system should behave in
the future.&lt;/p&gt;
&lt;p&gt;Great pensmanship does not make great writers.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The things we do have no rational basis. It is at least an Art&lt;/p&gt;
&lt;p&gt;Test-first fundamentalism is like abstinence-only sex education: An
unrealistic, ineffective morality campaign for self-loathing and
shaming&lt;/p&gt;
&lt;p&gt;There is no evidence that TDD does work&lt;/p&gt;
&lt;p&gt;People believe in things that can control, not in things that work&lt;/p&gt;
&lt;p&gt;Ignorance leads to overconfidence, inability to recognize skill, and
inability to assess one&amp;rsquo;s own level&lt;/p&gt;
&lt;p&gt;programming skill in the absence of business domain knowledge is
becoming increasing worthless&lt;/p&gt;
&lt;p&gt;software development process is exploratory by nature&lt;/p&gt;
&lt;p&gt;You are not paid to type! You are paid to think&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stop using opinions, we should provide more DATA to prove our point
of view&lt;/li&gt;
&lt;li&gt;You should look for where is your domain expertise&lt;/li&gt;
&lt;li&gt;We need understanding of DEEP CONTEXT&lt;/li&gt;
&lt;li&gt;You really need to study DOMAIN KNOWLEDGE&lt;/li&gt;
&lt;li&gt;Fight YAGNI: think ahead and plan&lt;/li&gt;
&lt;li&gt;Get rid of architects who do not code&lt;/li&gt;
&lt;li&gt;Get rid of coders without an HCI background&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/hard-thing-software-development-jesse-watson/&#34;&gt;Hard things about software development&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com.br/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/ref=sr_1_1?adgrpid=80727398585&amp;amp;gclid=CjwKCAiA9JbwBRAAEiwAnWa4Q5t16BYewHP8yNYJcXSTH7KXhC4pVG4cSFbG-rS0nz1K_J5h3dTKvBoCDp8QAvD_BwE&amp;amp;hvadid=392939680252&amp;amp;hvdev=c&amp;amp;hvlocphy=1001773&amp;amp;hvnetw=g&amp;amp;hvpos=1t1&amp;amp;hvqmt=e&amp;amp;hvrand=6991544172480746308&amp;amp;hvtargid=kwd-25827466034&amp;amp;hydadcr=5653_10696953&amp;amp;keywords=thinking+fast+and+slow&amp;amp;qid=1577505583&amp;amp;sr=8-1&#34;&gt;Thinking fast, thinking slow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Core Design Principles for Software Developers</title>
      <link>https://wandersoncferreira.github.io/notes/core-design-principles/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/core-design-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-videoshttpsyoutubellggo74uxmi&#34;&gt;&lt;a href=&#34;https://youtu.be/llGgO74uXMI&#34;&gt;Youtube Videos&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Venkat Subramaniam, Founder of Agile Developer, Inc.&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The presentations from Venkat are always interesting to watch. There
are several good guidelines to software development in general, but
also related to OOP with some principles like polymorphism and
open/close as good thing we should also strive for.&lt;/p&gt;
&lt;p&gt;Not sure about some peculiarities he seems to pay really attention
for, for example, DRY and IDE. However, I need to keep studying these
principles because I feel there are some good patterns here to be used
in other worlds as well.&lt;/p&gt;
&lt;p&gt;I will look for some exercises focusing the SOLID principles. Maybe
should be a good idea to go out for my current code and try to find
places where I already violate some of these principles.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Software is never written, it is always rewritten&lt;/p&gt;
&lt;p&gt;Keep it simple, stupid&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; keeps you focused&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; solves only real problem we know about&lt;/p&gt;
&lt;p&gt;Worst form of coupling - Inheritance&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Subject the design to changes along the way and see how it reacts
to it&lt;/li&gt;
&lt;li&gt;To create good design first step is let go of the ego&lt;/li&gt;
&lt;li&gt;Be unemotional&lt;/li&gt;
&lt;li&gt;Take time to review design and code&lt;/li&gt;
&lt;li&gt;You Are Not Gonna Neet It - Think YAGNI&lt;/li&gt;
&lt;li&gt;Try to see if you can remove coupling&lt;/li&gt;
&lt;li&gt;Focus on Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t comment what, instead comment why&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>A Philosophy of Software Design</title>
      <link>https://wandersoncferreira.github.io/notes/philosophy-software-design/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/philosophy-software-design/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubebmsaylu0ncylistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/bmSAYlu0NcY?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;John Ousterhout, Professor at Stanford&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I already read this book two times and probably I will do many more,
the idea of teaching design to people is very interesting. I like the
idea that software development is in most aspects related to creative
work like painting and music. Specially, the design phase is really
difficult to master and probably to teach as well.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Working code is not enough&lt;/p&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://extras.springer.com/2002/978-3-642-63970-8/DVD3/rom/pdf/Parnas_new.pdf&#34;&gt;On the Criteria to be Used in Decomposing Systems into Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You need to practice! A lot!&lt;/li&gt;
&lt;li&gt;Define semantics to eliminate exceptions. Minimize the
number of places to handle exceptions&lt;/li&gt;
&lt;li&gt;Try to find big abstraction! Depth is more important than length&lt;/li&gt;
&lt;li&gt;Classes should be deep! Information hiding is good&lt;/li&gt;
&lt;li&gt;Error that people make the most: too many, too small, too shallow classes&lt;/li&gt;
&lt;li&gt;You should make the common case, really really easy&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
  </channel>
</rss>
