<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Bartuka</title>
    <link>https://wandersoncferreira.github.io/tags/testing/</link>
    <description>Recent content in testing on Bartuka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2019 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://wandersoncferreira.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Is TDD dead?</title>
      <link>https://wandersoncferreira.github.io/notes/is-tdd-dead/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/is-tdd-dead/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubez9quxzslcfo&#34;&gt;&lt;a href=&#34;https://youtu.be/z9quxZsLcfo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;David Hansson, Martin Fowler and Kent Beck&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Yes, this debate was good to listen. Kent Beck itself really talking
about how the thing came to be. TDD is very nice for some workflows,
but the path to fast feedback loop is alwaaayyss desireble. That is
the main reason I see some people in the Clojure community advocating
about REPL-driven development instead of TDD.&lt;/p&gt;
&lt;p&gt;You can have immediate feedback of your running system! This the
supreme case for fast feedback loops.&lt;/p&gt;
&lt;p&gt;However, there are also some people that speak with the sole, unique
truth by their side. You should use TDD or you are &lt;em&gt;NOT&lt;/em&gt; a
professional.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen talks from Uncle Bob saying something like that. Really?
That defines me? I&amp;rsquo;ve been trying really hard to understand how can a
testable code provide a better design architecture only by being
testable.&lt;/p&gt;
&lt;p&gt;In my point of view, it looks like one more subject that programmers
like to debate to run away from the real problems. TDD you can
control, is under your choices. But there are complex stuff happening
at the business domain level, techinical requirements like distributed
systems, concurrency, auditable, and many others that are way more
complicated to define.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s agree that the definitions of professionalism in software
development is way far from being defined. It&amp;rsquo;s a hacky community and
I really like that way.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;TDD helps you with anxiety in programming craft&lt;/p&gt;
&lt;p&gt;I feel it is very hard to write test first before I see the code&lt;/p&gt;
&lt;p&gt;We should always think about how can we tweak the design to the code
be testable&lt;/p&gt;
&lt;p&gt;The isolation of unit testing is not mandatory inside the idea of TDD&lt;/p&gt;
&lt;p&gt;Fallacy: Because your code is more testable, it has a better design&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Can we be confident about your work? We should.&lt;/li&gt;
&lt;li&gt;Some parts of the project you can use TDD and some others you simply can&amp;rsquo;t&lt;/li&gt;
&lt;li&gt;Kent works from specific to general and TDD is good in this way&lt;/li&gt;
&lt;li&gt;I barely mock stuff&lt;/li&gt;
&lt;li&gt;Have self-testing code is critical. Have a command that can test
your entire system&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Jim Coplien and Bob Martin Debate TDD</title>
      <link>https://wandersoncferreira.github.io/notes/debate-tdd/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/debate-tdd/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubekthqgs3zfam&#34;&gt;&lt;a href=&#34;https://youtu.be/KtHQGs3zFAM&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jim Coplien and Bob Martin&lt;/p&gt;
&lt;h2 id=&#34;thought&#34;&gt;Thought&lt;/h2&gt;
&lt;p&gt;There are so many mixed feelings about TDD that I can&amp;rsquo;t produce
significant comments around it without being in the position of
contradict myself in two months from now.&lt;/p&gt;
&lt;p&gt;Fact is, people misuse a lot of what TDD &lt;em&gt;I think&lt;/em&gt; should do, by
saying that test is the only thing that matter. And in practice, I see
really big changes in design driven by business domain knowledge.&lt;/p&gt;
&lt;p&gt;Reality is that developers does not like to understand much about
their domains and are always concerned with small words they learn on
the internet about topics that cannot easily reach agreement.&lt;/p&gt;
&lt;p&gt;I prefer for now, to concern myself with other issues around code
development.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;[Jim Coplien] I don&amp;rsquo;t accept the thesis that the practice of TDD is a
pre-requisite for professionalism in software development in 2007&lt;/p&gt;
&lt;p&gt;[Jim Coplien] You want to capitalize yourself with knowledge upfront. Make
some hard decisions upfront&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t hide a bad architecture with a great interface&lt;/p&gt;
&lt;p&gt;Where is code, is bugs&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We need a good definition for professionalism in the area?&lt;/li&gt;
&lt;li&gt;Test by contract, pr√©-conditions, post-conditions and invariants&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
  </channel>
</rss>
