<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bartuka</title>
    <link>https://wandersoncferreira.github.io/notes/</link>
    <description>Recent content on Bartuka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jun 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://wandersoncferreira.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transactions: myths, surprises, and opportunities</title>
      <link>https://wandersoncferreira.github.io/notes/transactions-myths-surprises-and-opportunities/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/transactions-myths-surprises-and-opportunities/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutube5zjhntm8xu8&#34;&gt;&lt;a href=&#34;https://youtu.be/5ZjhNTM8XU8&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Martin Kleppmann&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;This was the first talk from Martin that I saw, he is very thoughtful
and explains complex ideas somehow easily. I think because of Datomic
I got more interest in databases, I did the Day of Datomic course in
person at Cognitect and it was very nice to meet so many people
interested in databases.&lt;/p&gt;
&lt;p&gt;Looks like the software engineers in general does not like this
subject very much, however seems like the job of building and dealing
with &amp;ldquo;information systems&amp;rdquo; will require you to know more and more
about these tools.&lt;/p&gt;
&lt;p&gt;I will keep watching materials from Martin now. Luckily, I already had
his book. Looking forward to read it.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Durability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archive tape&lt;/li&gt;
&lt;li&gt;fysnc to disk&lt;/li&gt;
&lt;li&gt;replication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consistency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not related to C in CAP theorem&lt;/li&gt;
&lt;li&gt;&amp;ldquo;tossed in to make the acronym work&amp;rdquo; (? lol)&lt;/li&gt;
&lt;li&gt;property of how the application use the database not the database itself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Atomicity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not about concurrency!&lt;/li&gt;
&lt;li&gt;handling faults (crashes)&lt;/li&gt;
&lt;li&gt;transactions = (multi-object) atomicity, rollback writes on abort&lt;/li&gt;
&lt;li&gt;Abortability is better name rather than Atomicity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Isolation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializable?&lt;/li&gt;
&lt;li&gt;Read committed. You read only after the operation has been committed.&lt;/li&gt;
&lt;li&gt;Snapshot isolation. Try to prevent read skew&lt;/li&gt;
&lt;li&gt;Repeatable read. Try to prevent read skew&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create transaction boundaries in your applications.&lt;/li&gt;
&lt;li&gt;Avoid transactions across services&lt;/li&gt;
&lt;li&gt;Learn the isolation levels defaults of your database and the implications&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>I see what you mean</title>
      <link>https://wandersoncferreira.github.io/notes/see-what-you-mean/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/see-what-you-mean/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutuber2aa4pivg0g&#34;&gt;&lt;a href=&#34;https://youtu.be/R2Aa4PivG0g&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Peter Alvado, UC Professor&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very nice presentation about declarative programming language.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Abstraction is sometimes harmful&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Operational semantics: the meaning of a program is what it does&lt;/p&gt;
&lt;p&gt;Model-theoretic semantics: the meaning of a program is the databases
that make it true&lt;/p&gt;
&lt;p&gt;What we want: Programs that are resilient to failure and tolerant of
loose ordering&lt;/p&gt;
&lt;p&gt;Why it is so hard: Too many possible behaviors.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Meanings are data representing outcomes. Outcomes are independent
of execution order.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Building senior Engineers</title>
      <link>https://wandersoncferreira.github.io/notes/building-senior-engineers/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/building-senior-engineers/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeirnnk5yx4qu&#34;&gt;&lt;a href=&#34;https://youtu.be/iRNnK5Yx4QU&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dalton Mitchell&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Given feedbacks is really hard. I am leading my team since 3 years ago
and I did tons of interviews, and I can say today that for our team
the culture fit was definetely the most important factor. We have
developed people to improve their tecnical side and sometime later
they became the MVP of their teams.&lt;/p&gt;
&lt;p&gt;This was great, and after sometime I started to have problems with my
HR team because I could not clearly communicate the values I was
&amp;ldquo;seeking&amp;rdquo;-for in the candidates and they were always asking me a list
of techonologies that the candidate must have. But truth be told, no
one knows Clojure in Brazil, 90% of our hires did not know it and we
actually rejected a nice technical clojure dev because of not good
alignment with the team.&lt;/p&gt;
&lt;p&gt;We were a &amp;ldquo;startup&amp;rdquo; and most of the environment is very very
high-paced, not well structured and very varying. You need to be ok of
putting a lot of effort in something and suddly one morning that
project is discontinued. It is shocking. Bad feeling. But it will
happen.&lt;/p&gt;
&lt;p&gt;What we did was to focus on the learning journey. Most of this dead
projected contributed to team knowledge of the domain and new ways to
solve our particular project. Proof of concepts in high speed with
high stakes.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;We&amp;rsquo;re looking for a more senior candidate&amp;rdquo; - Most feedback I got&lt;/p&gt;
&lt;p&gt;Look for these attributes: communication, curiousity, passion, determination&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: They won&amp;rsquo;t give up when things get tough.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: Rather than complain, they&amp;rsquo;ll propose solutions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: They&amp;rsquo;ll show empathy to others, and try to help when they struggle.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;High standards&lt;/li&gt;
&lt;li&gt;Focus on team impact&lt;/li&gt;
&lt;li&gt;Experience over head knowledge&lt;/li&gt;
&lt;li&gt;Be clear about that you value on your team&lt;/li&gt;
&lt;li&gt;Identify traits that actually matter&lt;/li&gt;
&lt;li&gt;Give useful feedback&lt;/li&gt;
&lt;li&gt;You received free, give gree.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Condition System in an Exceptional Language</title>
      <link>https://wandersoncferreira.github.io/notes/condition-system/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/condition-system/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubezp0oedcaro0&#34;&gt;&lt;a href=&#34;https://youtu.be/zp0OEDcAro0&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Cris Houser&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very nice presentation about how to handle errors.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Vast opportunities that we software developers have to make models
that prove and expand human knowledge, but &lt;strong&gt;we&amp;rsquo;are too busy
plumbing&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Consider alternatives to throwing exceptions&lt;/li&gt;
&lt;li&gt;Try out the built-in condition system, knowing this technique can
take you as far as you&amp;rsquo;re likely to need&lt;/li&gt;
&lt;li&gt;Use an existing condition system library where it makes sense.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Software Reliability, Principles &amp;amp; Practices - by Glenford&lt;/li&gt;
&lt;li&gt;Practical Common Lisp - by Peter Seibel&lt;/li&gt;
&lt;li&gt;The adventure of a blunder&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Event Driven Programming in Clojure</title>
      <link>https://wandersoncferreira.github.io/notes/event-driven-programming/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/event-driven-programming/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeqoscks51xfm&#34;&gt;&lt;a href=&#34;https://youtu.be/QOSCKs51xfM&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;One of the systems at work was very interesting because it had a very
asyncronous nature and our service provider did a great work enabling
us to leverage this style of programming. At the time I studied a lot
of materials from Golang community because we had this requirement to
develop it in Golang.&lt;/p&gt;
&lt;p&gt;The talks and materials online was far more rich and interesting than
what I found about clojure&amp;rsquo;s take in event driven programming. I do
have a book about it in Clojure, but I need to set aside more time for
reading it.&lt;/p&gt;
&lt;p&gt;For now, I signup for Timothy Baldridge Dropbox folder (rsrsrs) with a
really nice tutorials on core.async, and concurrency in general. I
recommend the material.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;We often spend more time &lt;em&gt;waiting&lt;/em&gt; on data than we do &lt;em&gt;computing&lt;/em&gt; our
response.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;System threads don&amp;rsquo;t grow on trees&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;events in clojure&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;immutability&lt;/li&gt;
&lt;li&gt;software transactional memory&lt;/li&gt;
&lt;li&gt;thread-agnosticism&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;syncrhonous concurrency is still simple&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Is Clojure an acceptable Lisp?</title>
      <link>https://wandersoncferreira.github.io/notes/clojure-acceptable-lisp/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/clojure-acceptable-lisp/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubey0luz7gbwbk&#34;&gt;&lt;a href=&#34;https://youtu.be/Y0LUZ7gbWbk&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hans Hubner&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Interesting view about Common Lisp and Clojure. I had started to
follow the book Practical Common Lisp some weeks ago, but due to other
events I have to stop it and start reading/studying other topics,
however the style of the book is great and I read in the past how OOP
is done in CL and it was very interesting to me.&lt;/p&gt;
&lt;p&gt;Clojure&amp;rsquo;s multimethods looked more clean and simplistic, but I wanted
to have a deep understanding of how CL did it and the real benefits of
the extra-stuff. My goal was to re-write some of the open-source
projects I have in CL to sense in better.&lt;/p&gt;
&lt;p&gt;Maybe I can relate to the topics of this video better after that.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The essence of Lisp&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Homoiconic language&lt;/li&gt;
&lt;li&gt;Interactive mode is the main source of develop your programs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Differences between Common Lisp and Clojure&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Several implementations of Common Lisp of the defined Standard&lt;/li&gt;
&lt;li&gt;More love to keyword args&lt;/li&gt;
&lt;li&gt;Very elaborate OOP&lt;/li&gt;
&lt;li&gt;Most complicated system to comparison between &amp;lsquo;things&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I really like to investigate and understand the problem using code&lt;/li&gt;
&lt;li&gt;Write more programs in common lisp&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>States and Nomads: Handling Software Complexity</title>
      <link>https://wandersoncferreira.github.io/notes/states-and-nomads/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/states-and-nomads/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubekgafci2unri&#34;&gt;&lt;a href=&#34;https://youtu.be/KGaFcI2UNrI&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Zach always provides a lot of references about amazing subjects, this
guy has a very scientific approach to software development and this is
great. I really believe we should take this road altogether.&lt;/p&gt;
&lt;p&gt;The choices you take when you build software depends on our knowledge
about the domain.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;We build systems that we can&amp;rsquo;t understand fully&lt;/p&gt;
&lt;p&gt;Heuristic devices don&amp;rsquo;t tell you when to stop. No abstraction
describes its own failures.&lt;/p&gt;
&lt;p&gt;The map is not the territory&lt;/p&gt;
&lt;p&gt;The Design Patterns book provides you the &amp;ldquo;blocks&amp;rdquo; about how you can
use to build solutions, however they do not talk about the environment
where your code is placed.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read from other areas about similar problems we face in software engineer&lt;/li&gt;
&lt;li&gt;Good planning is good planning&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;An introduction to General Systems Thinking - by Gerald. M. Weinberg&lt;/li&gt;
&lt;li&gt;A thousand plateaus&lt;/li&gt;
&lt;li&gt;Ficcoes - by Jorge Luis Borges&lt;/li&gt;
&lt;li&gt;A Pattern Language - by Christopher Alexander&lt;/li&gt;
&lt;li&gt;Patterns of Software - by Richard Gabriel&lt;/li&gt;
&lt;li&gt;Invisible Cities - by Calvino&lt;/li&gt;
&lt;li&gt;Data and Reality - by Kent&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>On Abstraction</title>
      <link>https://wandersoncferreira.github.io/notes/on-abstraction/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/on-abstraction/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubex9pxbnfc4aq&#34;&gt;&lt;a href=&#34;https://youtu.be/x9pxbnFC4aQ&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Difficult presentation because it deals with some very conceptual
topics, but Zach is very knowledgeable about his presentations there
are a lot of research behind it and we can tell how much effort he
made to deliver a good material and relevant.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The fundamental question of software is how do we deal with change&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I am going to watch this over and over, but I also need to read all
the material he suggested.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Abstraction&lt;/em&gt; maps the internal model onto external semantics.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;To think is to forget a difference, to generalize, to abstract. In
the overly replete world of Funes there were nothing but details,
almost contiguous details.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;An abstraction is useful only if its assumptions are sound&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If an abstraction can&amp;rsquo;t be discarded, it becomes coercive. What it
doesnt see might disapper.&lt;/p&gt;
&lt;p&gt;Software rould be easy, if it weren&amp;rsquo;t for changing environments. No
one tries to add a carwash to a bridge when it&amp;rsquo;s halfway built.&lt;/p&gt;
&lt;p&gt;Blind optimism isn&amp;rsquo;t a substitute for understanding.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Our models should be simplest thing that satisfices often enough&lt;/li&gt;
&lt;li&gt;When assumptions leak out, we have to use conventions&lt;/li&gt;
&lt;li&gt;Starting from scratch can be expensive&lt;/li&gt;
&lt;li&gt;Assumptions that &lt;em&gt;fail&lt;/em&gt; together &lt;em&gt;belong&lt;/em&gt; together&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The elements of clojure - by Zach Tellman&lt;/li&gt;
&lt;li&gt;Proof of Correctness of Data Representations - by Hoare&lt;/li&gt;
&lt;li&gt;The structure of scientific revolutions - by Thomas Kuhn&lt;/li&gt;
&lt;li&gt;The sciences of the Artificial - by Herbert A. Simon&lt;/li&gt;
&lt;li&gt;Funes the memorious - by Jorge Luis Borges&lt;/li&gt;
&lt;li&gt;Simulacra and Simulation - by Jean Baudrillard&lt;/li&gt;
&lt;li&gt;Seeing like a state - by James Scott&lt;/li&gt;
&lt;li&gt;Notes on the synthesis of form - by Christopher Alexander&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Improving Vim speed</title>
      <link>https://wandersoncferreira.github.io/notes/improving-vim-speed/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/improving-vim-speed/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeonuihlyzgaa&#34;&gt;&lt;a href=&#34;https://youtu.be/OnUiHLYZgaA&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thoughbot&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Vim is great tool. I learned a lot from the mindset of vim users about
efficiency in editing text. I think there is not other place where you
can find advices and people obsessed with fewer keystrokes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invest time to sharp your editing skills!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stay away from insert mode. &lt;em&gt;In Emacs I should use more commands to
movement and editing.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Stop using arrow keys. &lt;em&gt;In Emacs I already do not do that too much
now.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Learn different move characteres&lt;/li&gt;
&lt;li&gt;If you hold any character consider this a smell&lt;/li&gt;
&lt;li&gt;Use more F and T to movement. &lt;em&gt;In Emacs it should be through
&lt;code&gt;jump-char&lt;/code&gt; package.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Use the repeat command. &lt;em&gt;I need to check this one out in Emacs, I
never used it.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Relative movements between lines should like a good idea in Emacs?
I don&amp;rsquo;t think so right now.&lt;/li&gt;
&lt;li&gt;Use some kind of fuzzy finder. &lt;em&gt;Right now I am using Projectile and
Ido mode that cover almost all my use cases right now.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Look how to use Vim Surround in Emacs, how to do that?&lt;em&gt;The answer
might be &lt;code&gt;wrap-region&lt;/code&gt; package.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The impedance mismatch is our fault</title>
      <link>https://wandersoncferreira.github.io/notes/impedance-mismatch/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/impedance-mismatch/</guid>
      <description>&lt;h3 id=&#34;infoq-linkhttpswwwinfoqcompresentationsimpedance-mismatch&#34;&gt;&lt;a href=&#34;https://www.infoq.com/presentations/Impedance-Mismatch/&#34;&gt;InfoQ Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, co-creator of Datomic&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Datomic is a very very interesting peace of technology, I should find
more time to work with this. I might look for a new side project to
experiment with new ideas.&lt;/p&gt;
&lt;p&gt;Stuart has shaped a lot of how I think about programming today, thanks
again.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;All information in the database is to be represented in only one way,
namely by valyes in column positions within row of tables&amp;rdquo; - by Codd&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&amp;hellip; Essentially the ORM can handle about 80-90% of the mapping
problems..&amp;rdquo; - by Martin Fowler&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I don&amp;rsquo;t slow down when you watch me&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read &amp;ldquo;The Vietnam of computer science&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t give up! If you simplify OO and RDMS, you will find the
building blocks for a general-purpose approach to data&lt;/li&gt;
&lt;li&gt;Read &amp;ldquo;The Vietnam of computer science a response&amp;rdquo;&lt;/li&gt;
&lt;li&gt;This is not related to performace, many round-trips, this is
related to data being changed while you are in the between of the
round trips&lt;/li&gt;
&lt;li&gt;Transactions are awesome&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Maybe Not</title>
      <link>https://wandersoncferreira.github.io/notes/maybe-not/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/maybe-not/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeyr5wdgrpouglistplzdclr02grlrewkazv-5qbuzk0zgkoocr&#34;&gt;&lt;a href=&#34;https://youtu.be/YR5WdGrpoug?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;I call it my billion-dollar mistake. It was the invention of the null
reference in 1965 - by Tony Hoare.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Where are nulls/options used?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optional requirements (args)
&lt;ul&gt;
&lt;li&gt;variadics and kwargs mitigate in Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;conditional provision (returns)
&lt;ul&gt;
&lt;li&gt;managing partial information (aggregates)&lt;/li&gt;
&lt;li&gt;not idiomatic in Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Maps vs Records/Fields&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maps are (mathematical) functions!&lt;/li&gt;
&lt;li&gt;simplest functions in programming
&lt;ul&gt;
&lt;li&gt;keyset -&amp;gt; vals&lt;/li&gt;
&lt;li&gt;no code, no categories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What do we want?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maximize schema reuse
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t want context-driven proliferation
&lt;ul&gt;
&lt;li&gt;yields more code, less reuse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;support symmetric request/response
&lt;ul&gt;
&lt;li&gt;call partially filled in, get more filled in&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;information-building pipelines
&lt;ul&gt;
&lt;li&gt;many partial information increments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Maps are the most fundamental functions in programming&lt;/li&gt;
&lt;li&gt;You can flow information through systems that they doesn&amp;rsquo;t know
about and doesn&amp;rsquo;t care about it.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The Joys and Perils of Interactice Development</title>
      <link>https://wandersoncferreira.github.io/notes/joys-and-perils/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/joys-and-perils/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube-rafcpniyco&#34;&gt;&lt;a href=&#34;https://youtu.be/-RaFcpNiYCo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Sierra, consultant&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Everybody that work with Clojure can relate to the problems described
by Stuart, however the REPL-driven development is just so good to have
around.&lt;/p&gt;
&lt;p&gt;We must improve our toolings around it.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;[Remote Agent] was written entirely in Common Lisp despite
unrelenting political pressure to move to C++.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;We were not out to win over the Lisp programmers; we were after the
C++ programmers. We managed to drag a lot of them about halfway to
Lisp.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Definitions (source code in files) != Definitions (in language
runtime)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Debugging a program running on a $100M piece of hardware that is 100
million miles away is an &lt;em&gt;interesting experience&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Having a &lt;em&gt;read-eval-print-loop&lt;/em&gt; running on the spacecraft proved
invaluable in finding and fixing the problem&amp;rdquo; - by Ron Garret.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When you redefine a macro, you must reload all the code that uses it&lt;/li&gt;
&lt;li&gt;The Remote Agent Experiment: Debugging Code from 60 million miles
away (Google Tech Talks) - by Ron Garret&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Preventing the Collapse of Civilization</title>
      <link>https://wandersoncferreira.github.io/notes/preventing-collapse-civilization/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/preventing-collapse-civilization/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubepw-sodj4kkk&#34;&gt;&lt;a href=&#34;https://youtu.be/pW-SOdj4Kkk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jonathan Blow, consultant&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;This is why technology degrades. It taks a lot of energy to
communicate from generation to generation there are losses. Without
generational transfer, civilization dies.&lt;/p&gt;
&lt;p&gt;Thesis: Software is in decline; we depend on software
everywhere. Collapse look slow from the inside.&lt;/p&gt;
&lt;p&gt;Software has been riding on immense hardware improvements.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t expect software to work any more. How low will our standards
to shrink?&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;1177BC: The year civilization collapsed by Eric Cline&lt;/li&gt;
&lt;li&gt;Removing complexity is the right short-term play, even if it
doesn&amp;rsquo;t seem so&lt;/li&gt;
&lt;li&gt;Blog post from Nikita: &lt;a href=&#34;https://tonsky.me/blog/good-times-weak-men/&#34;&gt;https://tonsky.me/blog/good-times-weak-men/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video: The thirty million line problem - by Casey Muratori&lt;/li&gt;
&lt;li&gt;Video: Civilizations: Institutions, Knowledge and the Future by Samo Burja&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Design and Implementation of Bitemporal DBMS</title>
      <link>https://wandersoncferreira.github.io/notes/design-and-implementation-of-bitemporal-dbms/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-and-implementation-of-bitemporal-dbms/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeyjavsvygbuulistplethprqvx4a-c3kdrtxxwgrmemutl8apf&#34;&gt;&lt;a href=&#34;https://youtu.be/YjAVsvYGbuU?list=PLetHPRQvX4a-c3KDRTxxwGRmEMutL8Apf&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hákan Raberg, clojure developer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The amount of knowledge hidden in the world is incredible. Almost all
of these projects when explained makes me feel happy that I can grasp
the whole idea and I know I can understand the inner workings and
maybe start to contribute to some of these ideas.&lt;/p&gt;
&lt;p&gt;I would like to be more involved with very rigorous projects
like this one. One day!&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;A bitemporal table is a glorious structure&lt;/strong&gt;. It simultaneously
records the history of the enterprise, while also capturing the
sequence of record of that history.&amp;rdquo;&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transaction time&lt;/strong&gt;: may be implemented using transaction commit
times, and are system-generated and -supplied.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Valid time&lt;/strong&gt;: Is the time when the fact is true in the modeled
reality. Valid times are usually supplied by the user.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bitemporal time - slice queries&lt;/strong&gt;: takes as input two instants, a
valid-time and a transaction-time instant, and results in a snapshot
state of the information regarding the enterprise at that valid
time, as recorded in the database at that transaction time.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read more papers about computer science!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.cs.arizona.edu/~rts/tdbbook.pdf&#34;&gt;Developing Time-Oriented database applications in SQL&lt;/a&gt; - by Richard Snodgrass&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.arizona.edu/~rts/pubs/SIGMODRecordMarch94p52.pdf&#34;&gt;A consensus glossary of temporal database concepts&lt;/a&gt; - CS Jensen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs.ulb.ac.be/public/_media/teaching/infoh415/tempfeaturessql2011.pdf&#34;&gt;Temporal Features in SQL 2011&lt;/a&gt; - by Krishna&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://wandersoncferreira.github.io/notes/functional-programming/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/functional-programming/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubez0n1az6snbk&#34;&gt;&lt;a href=&#34;https://youtu.be/z0N1aZ6SnBk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erik Meijer, computer scientist and software developer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very good explanation about FP. It uses Haskell a lot as example but
all the concepts are easy to grasp. I made parallels with Clojure
while reading his lesson.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The concept of honest and disonest programming languages is about
tricking you to think the functions and method behaves in specific way
that you can&amp;rsquo;t predict.&lt;/p&gt;
&lt;p&gt;A lambda expression is a delegate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;nb&#34;&gt;class &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Delegate&amp;lt;T&lt;/span&gt;,&lt;span class=&#34;nv&#34;&gt;R&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A class is a superset of lambda expressions in .NET and other
languages. Lambda expressions is not about FP or Purity, they are all
about capturing closures.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FP definition is simple: Programming with mathematical functions!&lt;/li&gt;
&lt;li&gt;Everytime someone wants to make effects you have to pass a global
variable around. You have to pass the whole world around.&lt;/li&gt;
&lt;li&gt;Lambda expressions can provide you with closures and anonymous fns.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Transducers</title>
      <link>https://wandersoncferreira.github.io/notes/transducers/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/transducers/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube6mtbuzafcii&#34;&gt;&lt;a href=&#34;https://youtu.be/6mTbuzafcII&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I already watched this talk more than one year ago. And today I feel
very happy because I could understand 80% of that was said about
transducers and better yet, 100% of the problem that transducer
attempt to solve.&lt;/p&gt;
&lt;p&gt;This is a good proxy that I am learning =)&lt;/p&gt;
&lt;p&gt;Rich talks are always very bright and full of ideas and provocations
to your day-to-day job. It&amp;rsquo;s up to you to translate them and apply
succefully.&lt;/p&gt;
&lt;p&gt;The journey continues!&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;What they are?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract the &lt;strong&gt;essence&lt;/strong&gt; of map, filter et al&lt;/li&gt;
&lt;li&gt;away from the functions that transform sequences/collections&lt;/li&gt;
&lt;li&gt;recasting them as &lt;strong&gt;process transformations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;What kind of processes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ones that can defined in terms of a &lt;strong&gt;succession&lt;/strong&gt; or &lt;strong&gt;steps&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;where each step &lt;strong&gt;ingests&lt;/strong&gt; an &lt;strong&gt;input&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Transducers are fully decoupled&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;know nothing of the process they modify&lt;/li&gt;
&lt;li&gt;may call step 0, 1 or more times&lt;/li&gt;
&lt;li&gt;can transform input arg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Early Termination&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduction normally processes all input&lt;/li&gt;
&lt;li&gt;Sometimes a process has just &amp;lsquo;had enough&amp;rsquo; input, or gotten external trigger to terminate&lt;/li&gt;
&lt;li&gt;A transducer might decide the same&lt;/li&gt;
&lt;li&gt;code example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;comp&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapcatting&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;unbundle-pallet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;taking-while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;non-ticking?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filtering&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;non-food?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapping&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;label-heavy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;code-snippet&#34;&gt;Code Snippet&lt;/h2&gt;
&lt;p&gt;Process to early terminate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;taking-while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pred&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;step&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;reduced&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A stateful transducer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dropping-while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;volatile!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;drop?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;drop?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pred&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;vreset!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dv&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;step&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We can&amp;rsquo;t be reimplementing the same thing over and over again.&lt;/li&gt;
&lt;li&gt;Manu list fns can be defined in terms of &lt;em&gt;foldr&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;encapsulates the recursion&lt;/li&gt;
&lt;li&gt;easier to reason about and transform&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Transducers &lt;em&gt;must&lt;/em&gt; support arity-0 init in terms of a call to the
nested init.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.ox.ac.uk/files/3390/PRG69.pdf&#34;&gt;Lectures on Constructive Functional Programming&lt;/a&gt; - by RS Bird&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.nott.ac.uk/~pszgmh/fold.pdf&#34;&gt;A tutorial on the universality and expressiveness of fold&lt;/a&gt; - by Graham Hutton&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Extreme Programming 20 years later</title>
      <link>https://wandersoncferreira.github.io/notes/extreme-programming/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/extreme-programming/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubecgutmoudfbo&#34;&gt;&lt;a href=&#34;https://youtu.be/cGuTmOUdFbo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kent Beck, Facebook Advisor Programmer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I hardly can comment on Extreme Programming for now, but the ideas
that Kent is telling are no much distant from common sense in a way.&lt;/p&gt;
&lt;p&gt;For me, is very plausible that he came with all the basics for this
framework only by &lt;em&gt;making stuff up&lt;/em&gt;. After awhile, he noticed that
everything was well funded in experience reports.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Extreme Programming has three weeks interaction with stories and
testing&lt;/p&gt;
&lt;p&gt;If you have a dump idea, figure out the most cheap way to try it
out. They are always worth trying&lt;/p&gt;
&lt;p&gt;I am the owner of my code and I am responsible for its quality and
performance&lt;/p&gt;
&lt;p&gt;Extreme Programming matches the behavior of programmers in the wild&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I may need to experiment Smalltalk for a while&lt;/li&gt;
&lt;li&gt;Always be informed by data&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Toyota-Production-System-Beyond-Large-Scale/dp/0915299143&#34;&gt;Toyota Production System: Beyond Large-Scale Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658&#34;&gt;Extreme Programming Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Is TDD dead?</title>
      <link>https://wandersoncferreira.github.io/notes/is-tdd-dead/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/is-tdd-dead/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubez9quxzslcfo&#34;&gt;&lt;a href=&#34;https://youtu.be/z9quxZsLcfo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;David Hansson, Martin Fowler and Kent Beck&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Yes, this debate was good to listen. Kent Beck itself really talking
about how the thing came to be. TDD is very nice for some workflows,
but the path to fast feedback loop is alwaaayyss desireble. That is
the main reason I see some people in the Clojure community advocating
about REPL-driven development instead of TDD.&lt;/p&gt;
&lt;p&gt;You can have immediate feedback of your running system! This the
supreme case for fast feedback loops.&lt;/p&gt;
&lt;p&gt;However, there are also some people that speak with the sole, unique
truth by their side. You should use TDD or you are &lt;em&gt;NOT&lt;/em&gt; a
professional.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen talks from Uncle Bob saying something like that. Really?
That defines me? I&amp;rsquo;ve been trying really hard to understand how can a
testable code provide a better design architecture only by being
testable.&lt;/p&gt;
&lt;p&gt;In my point of view, it looks like one more subject that programmers
like to debate to run away from the real problems. TDD you can
control, is under your choices. But there are complex stuff happening
at the business domain level, techinical requirements like distributed
systems, concurrency, auditable, and many others that are way more
complicated to define.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s agree that the definitions of professionalism in software
development is way far from being defined. It&amp;rsquo;s a hacky community and
I really like that way.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;TDD helps you with anxiety in programming craft&lt;/p&gt;
&lt;p&gt;I feel it is very hard to write test first before I see the code&lt;/p&gt;
&lt;p&gt;We should always think about how can we tweak the design to the code
be testable&lt;/p&gt;
&lt;p&gt;The isolation of unit testing is not mandatory inside the idea of TDD&lt;/p&gt;
&lt;p&gt;Fallacy: Because your code is more testable, it has a better design&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Can we be confident about your work? We should.&lt;/li&gt;
&lt;li&gt;Some parts of the project you can use TDD and some others you simply can&amp;rsquo;t&lt;/li&gt;
&lt;li&gt;Kent works from specific to general and TDD is good in this way&lt;/li&gt;
&lt;li&gt;I barely mock stuff&lt;/li&gt;
&lt;li&gt;Have self-testing code is critical. Have a command that can test
your entire system&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Jim Coplien and Bob Martin Debate TDD</title>
      <link>https://wandersoncferreira.github.io/notes/debate-tdd/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/debate-tdd/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubekthqgs3zfam&#34;&gt;&lt;a href=&#34;https://youtu.be/KtHQGs3zFAM&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jim Coplien and Bob Martin&lt;/p&gt;
&lt;h2 id=&#34;thought&#34;&gt;Thought&lt;/h2&gt;
&lt;p&gt;There are so many mixed feelings about TDD that I can&amp;rsquo;t produce
significant comments around it without being in the position of
contradict myself in two months from now.&lt;/p&gt;
&lt;p&gt;Fact is, people misuse a lot of what TDD &lt;em&gt;I think&lt;/em&gt; should do, by
saying that test is the only thing that matter. And in practice, I see
really big changes in design driven by business domain knowledge.&lt;/p&gt;
&lt;p&gt;Reality is that developers does not like to understand much about
their domains and are always concerned with small words they learn on
the internet about topics that cannot easily reach agreement.&lt;/p&gt;
&lt;p&gt;I prefer for now, to concern myself with other issues around code
development.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;[Jim Coplien] I don&amp;rsquo;t accept the thesis that the practice of TDD is a
pre-requisite for professionalism in software development in 2007&lt;/p&gt;
&lt;p&gt;[Jim Coplien] You want to capitalize yourself with knowledge upfront. Make
some hard decisions upfront&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t hide a bad architecture with a great interface&lt;/p&gt;
&lt;p&gt;Where is code, is bugs&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We need a good definition for professionalism in the area?&lt;/li&gt;
&lt;li&gt;Test by contract, pré-conditions, post-conditions and invariants&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>What went wrong with the IT-industry?</title>
      <link>https://wandersoncferreira.github.io/notes/what-went-wrong/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/what-went-wrong/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubegpp7bleg214&#34;&gt;&lt;a href=&#34;https://youtu.be/gPP7Bleg214&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;James Coplien, researcher in the field o computer science&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I should look for more papers in the area of software
development. Opinions are really what control the industry of software
development.&lt;/p&gt;
&lt;p&gt;The whole thing about agile methods, in the beginning, was about how
do you get the domain knowledge from your organization.&lt;/p&gt;
&lt;p&gt;One of the things I like about my current job is that I am able to get
better at domain knowledge, I am surrounded about great people that
think really different about how the credit system should behave in
the future.&lt;/p&gt;
&lt;p&gt;Great pensmanship does not make great writers.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The things we do have no rational basis. It is at least an Art&lt;/p&gt;
&lt;p&gt;Test-first fundamentalism is like abstinence-only sex education: An
unrealistic, ineffective morality campaign for self-loathing and
shaming&lt;/p&gt;
&lt;p&gt;There is no evidence that TDD does work&lt;/p&gt;
&lt;p&gt;People believe in things that can control, not in things that work&lt;/p&gt;
&lt;p&gt;Ignorance leads to overconfidence, inability to recognize skill, and
inability to assess one&amp;rsquo;s own level&lt;/p&gt;
&lt;p&gt;programming skill in the absence of business domain knowledge is
becoming increasing worthless&lt;/p&gt;
&lt;p&gt;software development process is exploratory by nature&lt;/p&gt;
&lt;p&gt;You are not paid to type! You are paid to think&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stop using opinions, we should provide more DATA to prove our point
of view&lt;/li&gt;
&lt;li&gt;You should look for where is your domain expertise&lt;/li&gt;
&lt;li&gt;We need understanding of DEEP CONTEXT&lt;/li&gt;
&lt;li&gt;You really need to study DOMAIN KNOWLEDGE&lt;/li&gt;
&lt;li&gt;Fight YAGNI: think ahead and plan&lt;/li&gt;
&lt;li&gt;Get rid of architects who do not code&lt;/li&gt;
&lt;li&gt;Get rid of coders without an HCI background&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/hard-thing-software-development-jesse-watson/&#34;&gt;Hard things about software development&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com.br/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/ref=sr_1_1?adgrpid=80727398585&amp;amp;gclid=CjwKCAiA9JbwBRAAEiwAnWa4Q5t16BYewHP8yNYJcXSTH7KXhC4pVG4cSFbG-rS0nz1K_J5h3dTKvBoCDp8QAvD_BwE&amp;amp;hvadid=392939680252&amp;amp;hvdev=c&amp;amp;hvlocphy=1001773&amp;amp;hvnetw=g&amp;amp;hvpos=1t1&amp;amp;hvqmt=e&amp;amp;hvrand=6991544172480746308&amp;amp;hvtargid=kwd-25827466034&amp;amp;hydadcr=5653_10696953&amp;amp;keywords=thinking+fast+and+slow&amp;amp;qid=1577505583&amp;amp;sr=8-1&#34;&gt;Thinking fast, thinking slow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Core Design Principles for Software Developers</title>
      <link>https://wandersoncferreira.github.io/notes/core-design-principles/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/core-design-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-videoshttpsyoutubellggo74uxmi&#34;&gt;&lt;a href=&#34;https://youtu.be/llGgO74uXMI&#34;&gt;Youtube Videos&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Venkat Subramaniam, Founder of Agile Developer, Inc.&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The presentations from Venkat are always interesting to watch. There
are several good guidelines to software development in general, but
also related to OOP with some principles like polymorphism and
open/close as good thing we should also strive for.&lt;/p&gt;
&lt;p&gt;Not sure about some peculiarities he seems to pay really attention
for, for example, DRY and IDE. However, I need to keep studying these
principles because I feel there are some good patterns here to be used
in other worlds as well.&lt;/p&gt;
&lt;p&gt;I will look for some exercises focusing the SOLID principles. Maybe
should be a good idea to go out for my current code and try to find
places where I already violate some of these principles.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Software is never written, it is always rewritten&lt;/p&gt;
&lt;p&gt;Keep it simple, stupid&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; keeps you focused&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; solves only real problem we know about&lt;/p&gt;
&lt;p&gt;Worst form of coupling - Inheritance&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Subject the design to changes along the way and see how it reacts
to it&lt;/li&gt;
&lt;li&gt;To create good design first step is let go of the ego&lt;/li&gt;
&lt;li&gt;Be unemotional&lt;/li&gt;
&lt;li&gt;Take time to review design and code&lt;/li&gt;
&lt;li&gt;You Are Not Gonna Neet It - Think YAGNI&lt;/li&gt;
&lt;li&gt;Try to see if you can remove coupling&lt;/li&gt;
&lt;li&gt;Focus on Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t comment what, instead comment why&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Making Architecture Matter</title>
      <link>https://wandersoncferreira.github.io/notes/make-architecture-matter/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/make-architecture-matter/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubedngazywmgr0&#34;&gt;&lt;a href=&#34;https://youtu.be/DngAZyWMGR0&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Martin Fowler, Chief Scientist at ThoughtWorks&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small keynote but with good ideas about software architecture. I
really like the work of Martin Fowler and his view over this problem,
I feel how hard it is to move at the speed that startups needs/desire
and keep good architecture choices around. The business domain is
constantly changing, priorities are crazy depending on the week and
the idea of losing the race because we can&amp;rsquo;t provide better solution
now instead of &amp;ldquo;so-so&amp;rdquo; solutions is terrifying.&lt;/p&gt;
&lt;p&gt;Maybe this environment is just doomed to be re-written if the company
turns out successful. Internal quality is hard to be taken into
consideration specially when even high-quality workers are so scarce
in the market.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Expert developers&amp;rsquo; shared understandinf of the system design is
architecture&lt;/p&gt;
&lt;p&gt;The set of design decisions that you wish you could get right early on&lt;/p&gt;
&lt;p&gt;Architecture is a social thing&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What you want to do, when project grows is that everybody has a
shared understanding&lt;/li&gt;
&lt;li&gt;What we consider to be the most important thing of the system?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://files.catwell.info/misc/mirror/2003-martin-fowler-who-needs-an-architect.pdf&#34;&gt;Who needs an
architect?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;Design Stamina Hypothesis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Kill &#39;Microservices&#39; before its too late</title>
      <link>https://wandersoncferreira.github.io/notes/kill-microservices/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/kill-microservices/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube-ukepd2ipek&#34;&gt;&lt;a href=&#34;https://youtu.be/-UKEPd2ipEk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Chad Fowler, CTO of Wunderlist&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;I want to build systems that will survive.&amp;rdquo; I also have this feeling
that software cannot last for long without turning into unmanageble
pile of code. Interesting to see different points of view, John
Ousterhout in his presentation about &lt;em&gt;software design&lt;/em&gt; provided us
with his point of view that &lt;em&gt;length&lt;/em&gt; of code base does not really
matter and &lt;em&gt;depth&lt;/em&gt; would be the main thing to look for.&lt;/p&gt;
&lt;p&gt;Chad is a proponent of &lt;em&gt;tiny components&lt;/em&gt;. They are not talking about
exactly the same thing, but it&amp;rsquo;s interesting to notice all this
&amp;ldquo;guidelines&amp;rdquo; that worked for me and probably are not going to work to
everybody.&lt;/p&gt;
&lt;p&gt;Some very contradictory points was made by Chad in this presentation,
but I sort of agree based on my current experience with some points,
specially about shared code and treating code as &amp;ldquo;permanent&amp;rdquo;-thing.&lt;/p&gt;
&lt;p&gt;I like the idea to write systems and plan code to be disposable.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The system is the asset, &lt;em&gt;code&lt;/em&gt; is a liability&lt;/p&gt;
&lt;p&gt;Mutability of the system is enhanced by immutability of its components&lt;/p&gt;
&lt;p&gt;Code that works and has never been modified is good code. (???)&lt;/p&gt;
&lt;p&gt;If it hurts, do it more often&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Throw away the system and start over.&lt;/li&gt;
&lt;li&gt;You should plan to throw code away.&lt;/li&gt;
&lt;li&gt;Radically heterogenous environment to not become stuck with preconditions&lt;/li&gt;
&lt;li&gt;No shared code&lt;/li&gt;
&lt;li&gt;Metrics vs Tests&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Linus Torvalds on git</title>
      <link>https://wandersoncferreira.github.io/notes/linus-on-git/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/linus-on-git/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube4xpnkhjaok8&#34;&gt;&lt;a href=&#34;https://youtu.be/4XpnKHJAok8&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Linus Torvals&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s interesting how clear the requirements about a SCM system should
have when Linus talks about it. One day I should experiment another
SCM tool, back at my days in the university we used none of these for
most of the time. Actually, I had to interact with several data files
that would be very nicely done inside a Database but I accessed it
directly from disk. Savages =)&lt;/p&gt;
&lt;p&gt;Interesting to see how people at that audience is not familiar with
something that seems standard to me right now.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The only security work that can be done is through network of trust,
and this should be the only way that development is done as well.&lt;/p&gt;
&lt;p&gt;Distribution means, no one is special.&lt;/p&gt;
&lt;p&gt;Git does not track files, it tracks your contents.&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You might have as many branches as you like&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mercurial&lt;/em&gt; has the same model as git and some differences to
implementation details&lt;/li&gt;
&lt;li&gt;Centralized systems cannot work as well as distributed ones&lt;/li&gt;
&lt;li&gt;Your functions should have names short, sweet and to the point&lt;/li&gt;
&lt;li&gt;You should not have a single repository for every part of your
system. It&amp;rsquo;s better to have a &lt;em&gt;super project&lt;/em&gt; that have pointers to
other git repositories.&lt;/li&gt;
&lt;li&gt;History must always be seens on a project basis&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>SOLID Principles of Object Oriented &amp; Agile Design</title>
      <link>https://wandersoncferreira.github.io/notes/solid-principles/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/solid-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeqhnlmvdxgty&#34;&gt;&lt;a href=&#34;https://youtu.be/QHnLmvDxGTY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Robert &amp;ldquo;Uncle Bob&amp;rdquo; Martin&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I might be walking into undesirable path here, but every presentation
I saw from Uncle Bob was bad. I have to say that, I&amp;rsquo;m now saying that
there is no wisdom in these talks but only that I have to filter so
much unrelated and trivias that makes it difficult and most of the
times boring.&lt;/p&gt;
&lt;p&gt;I like presentations like Linus names his functions: short, sweet and
to the point.&lt;/p&gt;
&lt;p&gt;OO is about managing dependencies so you can prevent fragility and
rigidity&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The ultimate failure of a software developer is when the &lt;em&gt;business&lt;/em&gt;
prohibits you to make changes to a specific module in the system.&lt;/p&gt;
&lt;p&gt;Three magic words of OO: Encapsulation, Inherintance and Polymorphism&lt;/p&gt;
&lt;h2 id=&#34;principles&#34;&gt;Principles&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;ingle Responsibility: a class should have one single reason to change&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;pen/Closed: modules should be open for extension but closed for modification&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;iskov Substitution: derived classes must be usable through the base class interface&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;nterface segregation: clients should not be forced to depend upon interfaces that they do not use&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;ependency inversion: high-level modules, which provide complex logic, should not depend on low-level modules, which provides utility features. Both should depend on abstractions.&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You don&amp;rsquo;t get fast by written crap&lt;/li&gt;
&lt;li&gt;Inherintance is used in dynamic languages to inherint behaviors
from others&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;extra-links&#34;&gt;Extra links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackify.com/solid-design-principles/&#34;&gt;Solid Design Principles Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The Future Doesn&#39;t have to be incremental</title>
      <link>https://wandersoncferreira.github.io/notes/future-incremental/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/future-incremental/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubegtaghajco1o&#34;&gt;&lt;a href=&#34;https://youtu.be/gTAghAJcO1o&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Alan Kay, creator of Smalltalk&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Invention and incrementalism is only different from each other by the
size of the jump it provide from current reality. Interesting
definition of instrumentalist and innovators: when a new idea appears,
instrumentalist thinks about how this new thing can &lt;em&gt;improve&lt;/em&gt; their
&lt;em&gt;current&lt;/em&gt; goals, while innovators often &lt;em&gt;rethink&lt;/em&gt; and look for entire
new goals/possibilities.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;For most things, knowledge dominates IQ&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Everybody loves change, except by the &lt;em&gt;change&lt;/em&gt; part&lt;/p&gt;
&lt;p&gt;People hate learning curves&lt;/p&gt;
&lt;p&gt;When something is really new, you can barely see it&lt;/p&gt;
&lt;p&gt;Conscience is only a waken dream with more constrains about the things
that is happening around us&lt;/p&gt;
&lt;p&gt;Problem solving is too small an idea for &lt;em&gt;design and architecture&lt;/em&gt;,
the essential process is &lt;em&gt;problem finding&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We should strive for creations that change the context that we are
used to think&lt;/li&gt;
&lt;li&gt;The Present is the least important time we live in.&lt;/li&gt;
&lt;li&gt;Look at the past as something more broad and sampling the past we
should be able to assemble something really new to the future.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Back to Basics: Object-Oriented Programming</title>
      <link>https://wandersoncferreira.github.io/notes/back-to-basics/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/back-to-basics/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube32tdtd9ujce&#34;&gt;&lt;a href=&#34;https://youtu.be/32tDTD9UJCE&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jon Kalb, Software Instructor&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve being trying to find good modern material about OOP it&amp;rsquo;s very
difficult. I &lt;em&gt;imagine&lt;/em&gt; that OOP has some good lesons about modularity
and composition that might be very good to really master and to apply
in different contexts. I noticed that OOP depends a lot on the
community behind it, I could not find many good &lt;em&gt;same&lt;/em&gt; principles from
Java, C++ and Ruby comminuties. But I am still studying and trying to
understand polymorphism better.&lt;/p&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;OOP: a programming paradigm in C++ using polymorphism based on runtime
function dispatch using virtual functions&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;After the base class guarantees the preconditions and postconditions
of an operation, any derived class must respect those guarantess. An
override can ask for &lt;em&gt;less&lt;/em&gt; and provide &lt;em&gt;more&lt;/em&gt;, but it must never
require more or promise less because that would break the contract
that was promised to calling code.&lt;/p&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Coding-Standards-Rules-Guidelines-Practices/dp/0321113586&#34;&gt;From C++ Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Effective-Specific-Improve-Programs-Designs/dp/0321334876/ref=sr_1_1?keywords=effective+c%2B%2B&amp;amp;qid=1577292173&amp;amp;s=books&amp;amp;sr=1-1&#34;&gt;Effective C++: 55 specific ways to improve your programs and designs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Why are so many developers hating on Object-Oriented Programming?&lt;/li&gt;
&lt;li&gt;Make every class in your hierarchy either a base-only or leaf-only&lt;/li&gt;
&lt;li&gt;Give one entity one cohesive responsibility&lt;/li&gt;
&lt;li&gt;Use OOP to model &amp;ldquo;is-a&amp;rdquo; relationships, not for code-reuse&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>A Philosophy of Software Design</title>
      <link>https://wandersoncferreira.github.io/notes/philosophy-software-design/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/philosophy-software-design/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubebmsaylu0ncylistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/bmSAYlu0NcY?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;John Ousterhout, Professor at Stanford&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I already read this book two times and probably I will do many more,
the idea of teaching design to people is very interesting. I like the
idea that software development is in most aspects related to creative
work like painting and music. Specially, the design phase is really
difficult to master and probably to teach as well.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Working code is not enough&lt;/p&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://extras.springer.com/2002/978-3-642-63970-8/DVD3/rom/pdf/Parnas_new.pdf&#34;&gt;On the Criteria to be Used in Decomposing Systems into Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You need to practice! A lot!&lt;/li&gt;
&lt;li&gt;Define semantics to eliminate exceptions. Minimize the
number of places to handle exceptions&lt;/li&gt;
&lt;li&gt;Try to find big abstraction! Depth is more important than length&lt;/li&gt;
&lt;li&gt;Classes should be deep! Information hiding is good&lt;/li&gt;
&lt;li&gt;Error that people make the most: too many, too small, too shallow classes&lt;/li&gt;
&lt;li&gt;You should make the common case, really really easy&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Design, composition, and performance</title>
      <link>https://wandersoncferreira.github.io/notes/design-composition/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-composition/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubemcz3ygeeupglistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/MCZ3YgeEUPg?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, Creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I am currently working in a greenfield project and I will take some
step down and make sure I have all the pieces in place to move
forward. I&amp;rsquo;ve being doing a lot of work to take things apart in this
project, but I need a big picture to address things like
comprehension, coordination, extension, reuse, testing, and
efficiency.&lt;/p&gt;
&lt;p&gt;I have a profound simpathy for this talk because I often engaged in
discussions with colleagues about the situation of practice &lt;em&gt;before&lt;/em&gt;
work in software development. I came from the geophysics industry and
before you touch any equipment or data, you have to be subjected to
tons of training and simulations. Why people learn to code in
production time? I think the problem is even worse because most
managers do not even know that this situation happens, they think that
the team is ready to solve anything. This is scary.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In order to be creative you have to know how to prepare to be creative&lt;/li&gt;
&lt;li&gt;Separating into things that can be composed&lt;/li&gt;
&lt;li&gt;Move from want/need to &lt;em&gt;problems&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Take apart time/order/flow using queues, idempotency, commutation, transactions&lt;/li&gt;
&lt;li&gt;Composition you usually have self-imposed problems/constrains&lt;/li&gt;
&lt;li&gt;Beginners are not yet players&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;+Design+: &lt;em&gt;to prepare the plans for (a work to be executed),
especially to plan the form and structure of&lt;/em&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Clojure Java Interop</title>
      <link>https://wandersoncferreira.github.io/notes/clojure-java-interop/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/clojure-java-interop/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubebvi1bnggp0k&#34;&gt;&lt;a href=&#34;https://youtu.be/bvI1BNgGp0k&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I had to use some pure-Java libraries to deal with XSLX data format
lazily and that was a very simple learning curve for a person that has
never programmed in Java before (me!). For some reason, I had never
thought about using Clojure &lt;em&gt;from&lt;/em&gt; Java.&lt;/p&gt;
&lt;h2 id=&#34;code-nice-examples&#34;&gt;Code Nice Examples&lt;/h2&gt;
&lt;p&gt;Java - Chaining&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getZipCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Clojure - Chaining&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;.. &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;getAddress&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;getZipCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description> 
    </item>
    
    <item>
      <title>Design after agile, how to succed by trying less</title>
      <link>https://wandersoncferreira.github.io/notes/design-after-agile/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-after-agile/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubege_s55uvpyglistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/GE_s55Uvpyg?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I still create several diagrams about portion of my code. After I
discovered &lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; all my diagrams are plain
text files that create the figures as I compile in Emacs, you can even
render on github/gitlab issue tickets &amp;amp; PR&amp;rsquo;s. However, I still need to
be more dilligent to reach these files &lt;em&gt;before&lt;/em&gt; going to
code. Sometimes I find that experimenting with real code helps me to
see clearer and sometimes is just waste of time. Life is hard, right?&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;plans&lt;/em&gt; are useless, but &lt;em&gt;planning&lt;/em&gt; is indispensable.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make diagrams&lt;/li&gt;
&lt;li&gt;Make tables&lt;/li&gt;
&lt;li&gt;Write prose&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Running with Scissors</title>
      <link>https://wandersoncferreira.github.io/notes/running-with-scissors/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/running-with-scissors/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeqx0-pviyidu&#34;&gt;&lt;a href=&#34;https://youtu.be/Qx0-pViyIDU&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I still have difficult to understand what the sentence &lt;em&gt;&amp;ldquo;your running
program is tangible.&amp;quot;&lt;/em&gt; I never connected to a REPL created by running
a &lt;em&gt;jar&lt;/em&gt; file, but I often have some code running in remote servers
using &lt;em&gt;lein ring server&lt;/em&gt; or something similar which I can navigate
around the namespaces and manipulate the code. I also started to leave
test setup inside a comment block. VERY USEFUL!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Debugging with the Scientific Method</title>
      <link>https://wandersoncferreira.github.io/notes/debugging-with-science/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/debugging-with-science/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpswwwyoutubecomwatchvfihu5jxmnbg&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FihU5JxmnBg&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I am running closely the support team at my company today and the
number of findings you get about software and people interactions is
incredible. I first didn&amp;rsquo;t like the position at all, but I was not
really understanding what was happening. The evolution of a system
with your business is very complex and interesting with tons of
knowledge to take on for future products.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;If you don&amp;rsquo;t know where you are going, you might wind up someplace
else&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Weak &lt;em&gt;science&lt;/em&gt; is &lt;em&gt;stronger&lt;/em&gt; than &lt;em&gt;strong tools&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;_a-thousand-dollar-slide_&#34;&gt;&lt;em&gt;A thousand dollar slide&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Problem statements; &lt;strong&gt;steps&lt;/strong&gt; you took, what you &lt;strong&gt;expected&lt;/strong&gt;, what
&lt;strong&gt;actually&lt;/strong&gt; happened&lt;/p&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Why-Programs-Fail-Systematic-Debugging/dp/0123745152&#34;&gt;Why Programs Fail - A guide to systematic debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Structure-Scientific-Revolutions-50th-Anniversary/dp/0226458121/ref=sr_1_1?keywords=The+Structure+of+Scientific+Revolutions&amp;amp;qid=1577230210&amp;amp;s=books&amp;amp;sr=1-1&#34;&gt;The Structure of Scientific Revolutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Bell-Curve-Intelligence-Structure-Paperbacks/dp/0684824299/ref=sr_1_1?crid=1ZMFQ6J74SBPP&amp;amp;keywords=the+bell+curve&amp;amp;qid=1577230237&amp;amp;s=books&amp;amp;sprefix=the+bell+curve%2Cstripbooks-intl-ship%2C320&amp;amp;sr=1-1&#34;&gt;The Bell Curve&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
  </channel>
</rss>
