<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bartuka</title>
    <link>https://wandersoncferreira.github.io/</link>
    <description>Recent content on Bartuka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 00:00:00 -0300</lastBuildDate>
    
	<atom:link href="https://wandersoncferreira.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Back to Windows</title>
      <link>https://wandersoncferreira.github.io/blog/back-to-windows/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/blog/back-to-windows/</guid>
      <description>&lt;p&gt;A couple of weeks ago I wrote about using Emacs inside a terminal to
perform regular software development and to my surprise I would need
to take another unfamiliar step sooner: &lt;em&gt;become a Windows 10 user&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The idea of this post is to document all the steps I made to Windows
feel usable from a perspective of a 10 years old die-hard Linux user
(slackware, archlinux with i3wm, exwm, ratpoison, etc).&lt;/p&gt;
&lt;h1 id=&#34;swap-capslock-for-control&#34;&gt;Swap Capslock for Control&lt;/h1&gt;
&lt;p&gt;Funny enough, my first &amp;ldquo;task&amp;rdquo; on Windows and I was welcomed with
&amp;ldquo;change this binary data&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;You can use PowerShell with Adm rights:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$hexified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00&amp;#34;&lt;/span&gt;.Split&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; % &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0x&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$kbLayout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HKLM:\System\CurrentControlSet\Control\Keyboard Layout&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

New-ItemProperty -Path &lt;span class=&#34;nv&#34;&gt;$kbLayout&lt;/span&gt; -Name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Scancode Map&amp;#34;&lt;/span&gt; -PropertyType Binary -Value &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;byte&lt;span class=&#34;o&#34;&gt;[]]&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$hexified&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then &lt;em&gt;REBOOT!&lt;/em&gt; :O&lt;/p&gt;
&lt;h1 id=&#34;windows-meets-linux-anyway&#34;&gt;Windows meets Linux anyway&lt;/h1&gt;
&lt;p&gt;Install
&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;WSL2&lt;/a&gt; and
Ubuntu 20.04 LST on your machine. Be ready to allocate a lot of memory
on this setup. For example, I&amp;rsquo;ve been running at 2GB RAM allocated on
a daily basis.&lt;/p&gt;
&lt;p&gt;The next two softwares I installed was &lt;a href=&#34;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&#34;&gt;Windows
Terminal&lt;/a&gt;
and &lt;a href=&#34;https://docs.docker.com/docker-for-windows/wsl/&#34;&gt;Docker&lt;/a&gt;
compatible with WSL.&lt;/p&gt;
&lt;p&gt;A good start for me and not much to complain yet.&lt;/p&gt;
&lt;h1 id=&#34;i-dont-need-linux-but-i-need-emacs&#34;&gt;I don&amp;rsquo;t need linux, but I need Emacs&lt;/h1&gt;
&lt;p&gt;You can run Emacs native on Windows, but I already have lots of custom
setup and some of them require Unix tooling like grep, find, ripgrep,
ls, ledger cli, and many others.&lt;/p&gt;
&lt;p&gt;My plan: Install emacs inside Ubuntu and configure X forwarding
through a X Server application.&lt;/p&gt;
&lt;p&gt;I bought a license for &lt;a href=&#34;https://www.microsoft.com/en-us/p/x410/9nlp712zmn9q?activetab=pivot:overviewtab&#34;&gt;X410&lt;/a&gt; (it was cheaper than learning the free alternatives) and after installation I move ahead with the following setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow Public Access&lt;/li&gt;
&lt;li&gt;Shared Clipboard Enabled
&lt;ul&gt;
&lt;li&gt;Make sure to install all Windows updates or this will not work&lt;/li&gt;
&lt;li&gt;Seems like Windows learned the value of clipboard history.. enable that&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable High DPI for Windowed Apps&lt;/li&gt;
&lt;li&gt;Follow &lt;a href=&#34;https://x410.dev/cookbook/wsl/sharing-windows-fonts-with-wsl/&#34;&gt;here&lt;/a&gt; to share fonts between Windows and Ubuntu&lt;/li&gt;
&lt;li&gt;Add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; on Ubuntu:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DISPLAY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat /etc/resolv.conf &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep nameserver &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $2; exit;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;:0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;I created this emacs.vbs script so I can open Emacs from Windows Start Panel&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; -i &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;emacs&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
WScript.CreateObject&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Shell.Application&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.ShellExecute &lt;span class=&#34;s2&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt;, args, &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Clone your Emacs config in Ubuntu and you are good to go! Works fine.&lt;/p&gt;
&lt;h1 id=&#34;emacs-clashing-shortcuts&#34;&gt;Emacs clashing shortcuts&lt;/h1&gt;
&lt;p&gt;I imagined this would not be easy, because Windows does not allow you
to change a whole lot of shortcuts. For now, I am on the weak side,
therefore I just remapped some bindings I had using SUPER (windows
key) to something else.&lt;/p&gt;
&lt;p&gt;But I will be back!&lt;/p&gt;
&lt;h1 id=&#34;clojure-setup&#34;&gt;Clojure setup&lt;/h1&gt;
&lt;p&gt;You can install clojure and java inside the Ubuntu machine without a
problem.&lt;/p&gt;
&lt;h1 id=&#34;focus-follow-mouse&#34;&gt;Focus follow mouse&lt;/h1&gt;
&lt;p&gt;I am very used to &amp;ldquo;not click&amp;rdquo; on things. Therefore, when my mouse is
OVER some window, then I want this window to be the focus/active.&lt;/p&gt;
&lt;p&gt;I could not find any builtin way to make this happen, therefore I
installed this package called &lt;a href=&#34;https://joelpurra.com/projects/X-Mouse_Controls/&#34;&gt;X-Mouse
Controls&lt;/a&gt; it works.&lt;/p&gt;
&lt;h1 id=&#34;work-setup&#34;&gt;Work setup&lt;/h1&gt;
&lt;p&gt;I need to connect to remote machines, therefore you need a couple of
softwares to make this easier. I have used these guys before, they
haven&amp;rsquo;t changed&amp;hellip; &lt;a href=&#34;https://www.putty.org/&#34;&gt;PuTTY&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/jimradford/superputty/releases&#34;&gt;SuperPuTTY&lt;/a&gt;. However,
the last time I&amp;rsquo;ve used I remember typing my password in Extra
Arguments for SuperPutty, but we can do better using
&lt;a href=&#34;https://the.earth.li/~sgtatham/putty/latest/w32/pageant.exe&#34;&gt;Pageant&lt;/a&gt;
which is an SSH authentication agent for PuTTY. Add your keys there,
be safe.&lt;/p&gt;
&lt;h3 id=&#34;terminal-for-work&#34;&gt;Terminal for work&lt;/h3&gt;
&lt;p&gt;Bad days here.. I am impressed how bad the terminal emulators are on
this side of the map. The first release of RXVT was 19 years ago and
seems like today&amp;rsquo;s terminal are trying to &amp;ldquo;re-run&amp;rdquo; the marathon
instead of build upon something that works.&lt;/p&gt;
&lt;p&gt;I am using &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git Bash&lt;/a&gt; terminal, and
Windows Terminal, but I am not happy with none of them.&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;settings.json&lt;/code&gt; file on Windows Terminal where you can
customize it.&lt;/p&gt;
&lt;h4 id=&#34;keybindings&#34;&gt;Keybindings&lt;/h4&gt;
&lt;p&gt;On Windows Terminal I had to remove some annoying keys:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+enter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+shift-down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+shift-up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+shift-left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+shift-right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Put that inside the &lt;code&gt;settings.json&lt;/code&gt; under the &lt;code&gt;&amp;quot;keybindings&amp;quot;&lt;/code&gt; key.&lt;/p&gt;
&lt;h4 id=&#34;default-folders&#34;&gt;Default folders&lt;/h4&gt;
&lt;p&gt;Add inside the &lt;code&gt;settings.json&lt;/code&gt; under the &lt;code&gt;profiles&lt;/code&gt;, &lt;code&gt;lists&lt;/code&gt; keys.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;startingDirectory&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\\\\wsl$\\Ubuntu\\home\\wanderson&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, every new terminal will open from my Ubuntu root folder, instead
of Windows ones.&lt;/p&gt;
&lt;h1 id=&#34;extras&#34;&gt;Extras&lt;/h1&gt;
&lt;h3 id=&#34;windows-terminal-customizations&#34;&gt;Windows Terminal customizations&lt;/h3&gt;
&lt;p&gt;There is this interesting customized
&lt;a href=&#34;https://www.thomasmaurer.ch/2020/04/my-customized-windows-terminal-settings-json/&#34;&gt;settings.json&lt;/a&gt;
file if you want to go wild on this.&lt;/p&gt;
&lt;h3 id=&#34;start-x410-automatically-on-startup&#34;&gt;Start X410 automatically on startup&lt;/h3&gt;
&lt;p&gt;Press Super + R and type &lt;code&gt;shell:startup&lt;/code&gt; and ENTER. This will take you
to a folder, every link of application you put inside, will open when
your Windows start.&lt;/p&gt;
&lt;p&gt;Press Super and go to the X410 icon on the start menu, click and drag
it to the folder. It will automatically create a link.&lt;/p&gt;
&lt;p&gt;You can do the same to other apps.&lt;/p&gt;
&lt;h3 id=&#34;create-symlinks-on-your-linux-box&#34;&gt;Create symlinks on your Linux box&lt;/h3&gt;
&lt;p&gt;Mirror the Windows Documents folder with Linux Documents/&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ln -s /mnt/c/Users/iagwa/Documents Documents/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;still-on-waiting-list&#34;&gt;Still on Waiting List&lt;/h1&gt;
&lt;p&gt;One of my main complaints with Windows is how to install
software. Googling + luck to click on the right file is way to much
for me. I have to take a look at &lt;a href=&#34;https://chocolatey.org/&#34;&gt;chocolatey&lt;/a&gt;
project. A package manager. Looks good.&lt;/p&gt;
&lt;h1 id=&#34;still-annoyed&#34;&gt;Still annoyed&lt;/h1&gt;
&lt;p&gt;Seems like windows only open the aplications on the so called &amp;ldquo;Primary
Screen&amp;rdquo; which is non-sense. If I have two monitors and I am looking at
one of them and I want to open a new Chrome window .. for sure I
expect this new window to appear on that screen&amp;hellip; does not matter if
it&amp;rsquo;s primary or not. I don&amp;rsquo;t care.&lt;/p&gt;
&lt;p&gt;I could not find anything to help me out here! Please help.&lt;/p&gt;
&lt;p&gt;More generally, the window management on windows is very poor compared
to other window managers on linux world.&lt;/p&gt;
&lt;h1 id=&#34;very-surprised&#34;&gt;Very surprised&lt;/h1&gt;
&lt;p&gt;Multi monitor, audio, video, battery, and wifi just works. I know this
might be silly, but when you spent some months using EXWM (Emacs X
Window Manager) as your primary system you start to value this things
a lot more.&lt;/p&gt;
&lt;p&gt;Aghh, the startup time is also very good.&lt;/p&gt;
&lt;p&gt;I wonder how would be my experience here without my 1TB SSD, 16GB
of RAM, and i7 CPU. How knows, but this is good.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Windows work nicely, now I can use the &amp;ldquo;oficial&amp;rdquo; version of a lot of
software that I was used to rely on community-driven solutions with
variable degrees of commitment and quality.&lt;/p&gt;
&lt;p&gt;All things considered, I am very surprised by Windows 10. I do not
complain because I can do almost the same things as before.&lt;/p&gt;
&lt;p&gt;And my batery is not drained. 6.7hours for a 2 years old laptop. not
bad.&lt;/p&gt;
&lt;p&gt;I might use this opportunity to learn a bit of F#, who knows.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Emacs in the terminal</title>
      <link>https://wandersoncferreira.github.io/blog/emacs-on-terminal/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/blog/emacs-on-terminal/</guid>
      <description>&lt;p&gt;Unfortunately, the Emacs community seems to don&amp;rsquo;t like very much the
idea of using Emacs inside a &lt;strong&gt;terminal&lt;/strong&gt;. I can relate to that
afterall we have &lt;a href=&#34;https://www.emacswiki.org/emacs/TrampMode&#34;&gt;Tramp
Mode&lt;/a&gt; and all the nicities
that Emacs executes behind the scenes to make other commands work
flawlessly like Magit, and some REPL interactions.&lt;/p&gt;
&lt;p&gt;However, life is harder than that and often full of requirements. I
have a slow connection and I need to work in a project that cannot
leave a remote machine. I code in Clojure and the delay to access
&lt;em&gt;code completion&lt;/em&gt;, &lt;em&gt;eldoc hints&lt;/em&gt;, &lt;em&gt;magit commands&lt;/em&gt;, &lt;em&gt;saving files and running scripts&lt;/em&gt;, &lt;em&gt;navigating around folder structures in dired&lt;/em&gt;, etc,
is too much for my taste and for my internet connection pinging ~150ms.&lt;/p&gt;
&lt;p&gt;Therefore, this post will be my collection of tips I&amp;rsquo;ve been using to
make my Emacs in terminal life more pleasant.&lt;/p&gt;
&lt;h2 id=&#34;choose-a-good-terminal-emulator&#34;&gt;Choose a good terminal emulator&lt;/h2&gt;
&lt;p&gt;Yeah, I have been using Xfce Terminal for a while and most of my work
was done inside Eshell. I tried several emulators and settled with
&lt;a href=&#34;http://rxvt.sourceforge.net/&#34;&gt;RXVT&lt;/a&gt; which is a bless and a curse at
the same time.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using Arch linux and you can install by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pacman -S rxvt-unicode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;making-rxvt-looks-good&#34;&gt;Making RXVT looks good&lt;/h2&gt;
&lt;p&gt;The relevant portions of my &lt;code&gt;~/.Xresources&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Xft.dpi:                    &lt;span class=&#34;m&#34;&gt;96&lt;/span&gt;
Xft.antialias:              &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
Xft.rgba:                   rgb
Xft.hinting:                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
Xft.hintstyle:              hintslight
URxvt*buffered: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;

URxvt*font: xft:Fira Code:style&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Retina:pixelsize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;14:antialias&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;true:hinting&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;

URxvt.geometry:             90x30
URxvt.transparent:          &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
URxvt.visualBell:           &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
URxvt.inheritPixmap:        &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
URxvt.loginShell:           &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
URxvt.saveLines:            &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;
URxvt.scrollBar:            &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
URxvt.internalBorder:       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
URxvt.lineSpace:            &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

! fix cursor size
Xcursor.size: &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;

! Fix font space
URxvt*letterSpace: -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I don&amp;rsquo;t want to engage in color scheme fights, I often use the simple
black on white default from Emacs.&lt;/p&gt;
&lt;h2 id=&#34;leveraging-remappings-in-rxvt&#34;&gt;Leveraging remappings in RXVT&lt;/h2&gt;
&lt;p&gt;For an Emacs user, the most frustrated moment is to type that
powercord that is wired in your brain for ages and the result be the
unexpected.&lt;/p&gt;
&lt;p&gt;For me &lt;code&gt;C-backspace&lt;/code&gt; was very very important. I rely on that to kill
words all the time. Fortunately, RXVT can help me out here. Let&amp;rsquo;s look
at it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;! remapping some &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; 
URxvt.keysym.C-BackSpace: &lt;span class=&#34;se&#34;&gt;\0&lt;/span&gt;33&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;33~
URxvt.keysym.C-equal: &lt;span class=&#34;se&#34;&gt;\0&lt;/span&gt;33&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;34~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is happening? RXVT is remapping &lt;code&gt;C-Backspace&lt;/code&gt; and &lt;code&gt;C-equal&lt;/code&gt; to
&lt;code&gt;&amp;lt;f9&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;f10&amp;gt;&lt;/code&gt;. So you already know what to do, right?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;f9&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;backward-kill-word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;f10&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;er/expand-region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And life can go on!&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t tested if the rxvt remap is consistent across different
machines, I recommend remapping and using &lt;code&gt;C-h k&lt;/code&gt; inside emacs to
figure out which was the target key.&lt;/p&gt;
&lt;p&gt;For some reason I could not find a list with all the available keysyms
to be remapped in rxvt, but let me list those I have used:&lt;/p&gt;
&lt;p&gt;C-equal, C-apostrophe, C-0, C-minus, C-plus, C-S-Down, C-slash,
C-S-Up, C-M-v, Escape.&lt;/p&gt;
&lt;h2 id=&#34;copy-paste-and-resize&#34;&gt;Copy, paste and resize&lt;/h2&gt;
&lt;p&gt;Crazy, hein? In 2020 we have issues with copy and paste in a reliable
form. I installed a package with Perl extensions to improve this a bit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pacman -S urxvt-perls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the relevant portions for configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;URxvt.perl-ext-common:      default,clipboard,resize-font
URxvt.keysym.Shift-Control-V: perl:clipboard:paste

! scale fonts
URxvt.resize-font.reset: C-0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the &lt;code&gt;resize-font&lt;/code&gt; plugin was extracted from somewhere
else. You have to create a folder (if not exist yet) at
&lt;code&gt;~/.urxvt/ext/&lt;/code&gt;, paste the script from
&lt;a href=&#34;https://blog.khmersite.net/2017/12/change-the-urxvt-font-size-on-the-fly/&#34;&gt;here&lt;/a&gt;
in there and update RXVT using &lt;code&gt;xrdb ~/.Xresources&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can follow more detailed steps in this great
&lt;a href=&#34;https://blog.khmersite.net/2017/12/change-the-urxvt-font-size-on-the-fly/&#34;&gt;post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can now use &lt;code&gt;C-+&lt;/code&gt; and &lt;code&gt;C--&lt;/code&gt; to resize the font and also &lt;code&gt;C-0&lt;/code&gt; to
reset it. I change the default because I wanted &lt;code&gt;C-=&lt;/code&gt; to be used by
&lt;code&gt;expand-region&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ok, these are the configurations from the RXVT side, let&amp;rsquo;s go inside
Emacs and see what we need to change.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; fix kill rings&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;save-interprogram-paste-before-kill&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;x-select-enable-clipboard&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;select-enable-clipboard&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xclip&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;:ensure&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;xclip-mode&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;+1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I am assuming you have &lt;code&gt;use-package&lt;/code&gt; or know how to install packages
otherwise.&lt;/p&gt;
&lt;p&gt;Now you can simply copy something from Firefox and paste inside Emacs
using the regular &lt;code&gt;C-y&lt;/code&gt;. And the opposite is also true, just copy
something with &lt;code&gt;M-w&lt;/code&gt; and paste inside your external program.&lt;/p&gt;
&lt;h2 id=&#34;run-emacs-in-daemon-mode&#34;&gt;Run emacs in daemon mode&lt;/h2&gt;
&lt;p&gt;At the terminal, you might be using &lt;code&gt;tmux&lt;/code&gt; or &lt;code&gt;screen&lt;/code&gt; to handle
different workspaces and you might want to open Emacs in there to some
quick editing.&lt;/p&gt;
&lt;p&gt;Therefore, I find easier to run emacs as a daemon to quickly jump to a
running server when I need.&lt;/p&gt;
&lt;p&gt;I run the following code in the remote machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;emacs --daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And I have this function inside my &lt;code&gt;~/.init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;server-shutdown&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Save buffers, quit, and shutdown server&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;save-some-buffers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;kill-emacs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, the following alias at the &lt;code&gt;~/.bashrc&lt;/code&gt; remote machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ee&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emacsclient -t&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But now, you will notice something bad&amp;hellip; when you type &lt;code&gt;ee my_f&lt;/code&gt; and
hit &lt;code&gt;TAB&lt;/code&gt; you would expect a completion. I had to use the
&lt;a href=&#34;https://github.com/cykerway/complete-alias&#34;&gt;complete_alias&lt;/a&gt; project
to make it work.&lt;/p&gt;
&lt;p&gt;It was simple, just follow their README, but in essence you need to
install &lt;code&gt;bash-completion&lt;/code&gt;, copy their &lt;code&gt;complete_alias&lt;/code&gt; script inside
your &lt;code&gt;~/.bash_completion&lt;/code&gt; file and setup your alias as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ee&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emacsclient -t&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt; -F _complete_alias ee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fine!&lt;/p&gt;
&lt;h2 id=&#34;multiplexers&#34;&gt;Multiplexers&lt;/h2&gt;
&lt;p&gt;If you are using &lt;code&gt;tmux&lt;/code&gt; you will notice that the default keybind to
manipulate it is &lt;code&gt;C-b&lt;/code&gt; :/. I often do not use it inside Emacs, but I
would like to have something to not conflict with basic keys.&lt;/p&gt;
&lt;p&gt;This is my &lt;code&gt;~/.tmux.conf&lt;/code&gt; using &lt;code&gt;C-]&lt;/code&gt; as the leader key for tmux.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;set-window-option -g mode-keys emacs

unbind-key C-b
set-option -g prefix C-&lt;span class=&#34;s1&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;

bind-key r source-file ~/.tmux.conf &lt;span class=&#34;se&#34;&gt;\;&lt;/span&gt; display-message &lt;span class=&#34;s2&#34;&gt;&amp;#34;~/.tmux.conf reloaded&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;a-new-friendier-binding&#34;&gt;A new friendier binding&lt;/h2&gt;
&lt;p&gt;I just wanted to point out that I have never used &lt;code&gt;C-z&lt;/code&gt;
(suspend-frame) before. And this is killer right now, &lt;code&gt;C-z&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;
reminds me of my darker background as a &lt;code&gt;vim&lt;/code&gt; user a long time ago.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I was expecting to be a lot easier to have a more similar experience
in the terminal as we have in GUI, but I was even more astonished by
the lack of informations to help a newcomer (me) to setup a workable
environment.&lt;/p&gt;
&lt;p&gt;Hope to continue releasing more about Emacs inside the Terminal as I
move along. Please, if you have any tips, share them around! Reddit or
hackernews are great platforms to achieve visibility.&lt;/p&gt;
&lt;p&gt;All this post was made in Emacs, inside a rxvt terminal. No
complaints.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Transactions: myths, surprises, and opportunities</title>
      <link>https://wandersoncferreira.github.io/notes/transactions-myths-surprises-and-opportunities/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/transactions-myths-surprises-and-opportunities/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutube5zjhntm8xu8&#34;&gt;&lt;a href=&#34;https://youtu.be/5ZjhNTM8XU8&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Martin Kleppmann&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;This was the first talk from Martin that I saw, he is very thoughtful
and explains complex ideas somehow easily. I think because of Datomic
I got more interest in databases, I did the Day of Datomic course in
person at Cognitect and it was very nice to meet so many people
interested in databases.&lt;/p&gt;
&lt;p&gt;Looks like the software engineers in general does not like this
subject very much, however seems like the job of building and dealing
with &amp;ldquo;information systems&amp;rdquo; will require you to know more and more
about these tools.&lt;/p&gt;
&lt;p&gt;I will keep watching materials from Martin now. Luckily, I already had
his book. Looking forward to read it.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Durability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archive tape&lt;/li&gt;
&lt;li&gt;fysnc to disk&lt;/li&gt;
&lt;li&gt;replication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consistency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not related to C in CAP theorem&lt;/li&gt;
&lt;li&gt;&amp;ldquo;tossed in to make the acronym work&amp;rdquo; (? lol)&lt;/li&gt;
&lt;li&gt;property of how the application use the database not the database itself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Atomicity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not about concurrency!&lt;/li&gt;
&lt;li&gt;handling faults (crashes)&lt;/li&gt;
&lt;li&gt;transactions = (multi-object) atomicity, rollback writes on abort&lt;/li&gt;
&lt;li&gt;Abortability is better name rather than Atomicity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Isolation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializable?&lt;/li&gt;
&lt;li&gt;Read committed. You read only after the operation has been committed.&lt;/li&gt;
&lt;li&gt;Snapshot isolation. Try to prevent read skew&lt;/li&gt;
&lt;li&gt;Repeatable read. Try to prevent read skew&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create transaction boundaries in your applications.&lt;/li&gt;
&lt;li&gt;Avoid transactions across services&lt;/li&gt;
&lt;li&gt;Learn the isolation levels defaults of your database and the implications&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>I see what you mean</title>
      <link>https://wandersoncferreira.github.io/notes/see-what-you-mean/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/see-what-you-mean/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutuber2aa4pivg0g&#34;&gt;&lt;a href=&#34;https://youtu.be/R2Aa4PivG0g&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Peter Alvado, UC Professor&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very nice presentation about declarative programming language.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Abstraction is sometimes harmful&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Operational semantics: the meaning of a program is what it does&lt;/p&gt;
&lt;p&gt;Model-theoretic semantics: the meaning of a program is the databases
that make it true&lt;/p&gt;
&lt;p&gt;What we want: Programs that are resilient to failure and tolerant of
loose ordering&lt;/p&gt;
&lt;p&gt;Why it is so hard: Too many possible behaviors.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Meanings are data representing outcomes. Outcomes are independent
of execution order.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Building senior Engineers</title>
      <link>https://wandersoncferreira.github.io/notes/building-senior-engineers/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/building-senior-engineers/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeirnnk5yx4qu&#34;&gt;&lt;a href=&#34;https://youtu.be/iRNnK5Yx4QU&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Dalton Mitchell&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Given feedbacks is really hard. I am leading my team since 3 years ago
and I did tons of interviews, and I can say today that for our team
the culture fit was definetely the most important factor. We have
developed people to improve their tecnical side and sometime later
they became the MVP of their teams.&lt;/p&gt;
&lt;p&gt;This was great, and after sometime I started to have problems with my
HR team because I could not clearly communicate the values I was
&amp;ldquo;seeking&amp;rdquo;-for in the candidates and they were always asking me a list
of techonologies that the candidate must have. But truth be told, no
one knows Clojure in Brazil, 90% of our hires did not know it and we
actually rejected a nice technical clojure dev because of not good
alignment with the team.&lt;/p&gt;
&lt;p&gt;We were a &amp;ldquo;startup&amp;rdquo; and most of the environment is very very
high-paced, not well structured and very varying. You need to be ok of
putting a lot of effort in something and suddly one morning that
project is discontinued. It is shocking. Bad feeling. But it will
happen.&lt;/p&gt;
&lt;p&gt;What we did was to focus on the learning journey. Most of this dead
projected contributed to team knowledge of the domain and new ways to
solve our particular project. Proof of concepts in high speed with
high stakes.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;We&amp;rsquo;re looking for a more senior candidate&amp;rdquo; - Most feedback I got&lt;/p&gt;
&lt;p&gt;Look for these attributes: communication, curiousity, passion, determination&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: They won&amp;rsquo;t give up when things get tough.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: Rather than complain, they&amp;rsquo;ll propose solutions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Determination&lt;/em&gt;: They&amp;rsquo;ll show empathy to others, and try to help when they struggle.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;High standards&lt;/li&gt;
&lt;li&gt;Focus on team impact&lt;/li&gt;
&lt;li&gt;Experience over head knowledge&lt;/li&gt;
&lt;li&gt;Be clear about that you value on your team&lt;/li&gt;
&lt;li&gt;Identify traits that actually matter&lt;/li&gt;
&lt;li&gt;Give useful feedback&lt;/li&gt;
&lt;li&gt;You received free, give gree.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Condition System in an Exceptional Language</title>
      <link>https://wandersoncferreira.github.io/notes/condition-system/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/condition-system/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubezp0oedcaro0&#34;&gt;&lt;a href=&#34;https://youtu.be/zp0OEDcAro0&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Cris Houser&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very nice presentation about how to handle errors.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Vast opportunities that we software developers have to make models
that prove and expand human knowledge, but &lt;strong&gt;we&amp;rsquo;are too busy
plumbing&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Consider alternatives to throwing exceptions&lt;/li&gt;
&lt;li&gt;Try out the built-in condition system, knowing this technique can
take you as far as you&amp;rsquo;re likely to need&lt;/li&gt;
&lt;li&gt;Use an existing condition system library where it makes sense.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Software Reliability, Principles &amp;amp; Practices - by Glenford&lt;/li&gt;
&lt;li&gt;Practical Common Lisp - by Peter Seibel&lt;/li&gt;
&lt;li&gt;The adventure of a blunder&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Event Driven Programming in Clojure</title>
      <link>https://wandersoncferreira.github.io/notes/event-driven-programming/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/event-driven-programming/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeqoscks51xfm&#34;&gt;&lt;a href=&#34;https://youtu.be/QOSCKs51xfM&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;One of the systems at work was very interesting because it had a very
asyncronous nature and our service provider did a great work enabling
us to leverage this style of programming. At the time I studied a lot
of materials from Golang community because we had this requirement to
develop it in Golang.&lt;/p&gt;
&lt;p&gt;The talks and materials online was far more rich and interesting than
what I found about clojure&amp;rsquo;s take in event driven programming. I do
have a book about it in Clojure, but I need to set aside more time for
reading it.&lt;/p&gt;
&lt;p&gt;For now, I signup for Timothy Baldridge Dropbox folder (rsrsrs) with a
really nice tutorials on core.async, and concurrency in general. I
recommend the material.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;We often spend more time &lt;em&gt;waiting&lt;/em&gt; on data than we do &lt;em&gt;computing&lt;/em&gt; our
response.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;System threads don&amp;rsquo;t grow on trees&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;events in clojure&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;immutability&lt;/li&gt;
&lt;li&gt;software transactional memory&lt;/li&gt;
&lt;li&gt;thread-agnosticism&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;syncrhonous concurrency is still simple&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Is Clojure an acceptable Lisp?</title>
      <link>https://wandersoncferreira.github.io/notes/clojure-acceptable-lisp/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/clojure-acceptable-lisp/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubey0luz7gbwbk&#34;&gt;&lt;a href=&#34;https://youtu.be/Y0LUZ7gbWbk&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hans Hubner&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Interesting view about Common Lisp and Clojure. I had started to
follow the book Practical Common Lisp some weeks ago, but due to other
events I have to stop it and start reading/studying other topics,
however the style of the book is great and I read in the past how OOP
is done in CL and it was very interesting to me.&lt;/p&gt;
&lt;p&gt;Clojure&amp;rsquo;s multimethods looked more clean and simplistic, but I wanted
to have a deep understanding of how CL did it and the real benefits of
the extra-stuff. My goal was to re-write some of the open-source
projects I have in CL to sense in better.&lt;/p&gt;
&lt;p&gt;Maybe I can relate to the topics of this video better after that.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The essence of Lisp&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Homoiconic language&lt;/li&gt;
&lt;li&gt;Interactive mode is the main source of develop your programs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Differences between Common Lisp and Clojure&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Several implementations of Common Lisp of the defined Standard&lt;/li&gt;
&lt;li&gt;More love to keyword args&lt;/li&gt;
&lt;li&gt;Very elaborate OOP&lt;/li&gt;
&lt;li&gt;Most complicated system to comparison between &amp;lsquo;things&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I really like to investigate and understand the problem using code&lt;/li&gt;
&lt;li&gt;Write more programs in common lisp&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>States and Nomads: Handling Software Complexity</title>
      <link>https://wandersoncferreira.github.io/notes/states-and-nomads/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/states-and-nomads/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubekgafci2unri&#34;&gt;&lt;a href=&#34;https://youtu.be/KGaFcI2UNrI&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Zach always provides a lot of references about amazing subjects, this
guy has a very scientific approach to software development and this is
great. I really believe we should take this road altogether.&lt;/p&gt;
&lt;p&gt;The choices you take when you build software depends on our knowledge
about the domain.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;We build systems that we can&amp;rsquo;t understand fully&lt;/p&gt;
&lt;p&gt;Heuristic devices don&amp;rsquo;t tell you when to stop. No abstraction
describes its own failures.&lt;/p&gt;
&lt;p&gt;The map is not the territory&lt;/p&gt;
&lt;p&gt;The Design Patterns book provides you the &amp;ldquo;blocks&amp;rdquo; about how you can
use to build solutions, however they do not talk about the environment
where your code is placed.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read from other areas about similar problems we face in software engineer&lt;/li&gt;
&lt;li&gt;Good planning is good planning&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;An introduction to General Systems Thinking - by Gerald. M. Weinberg&lt;/li&gt;
&lt;li&gt;A thousand plateaus&lt;/li&gt;
&lt;li&gt;Ficcoes - by Jorge Luis Borges&lt;/li&gt;
&lt;li&gt;A Pattern Language - by Christopher Alexander&lt;/li&gt;
&lt;li&gt;Patterns of Software - by Richard Gabriel&lt;/li&gt;
&lt;li&gt;Invisible Cities - by Calvino&lt;/li&gt;
&lt;li&gt;Data and Reality - by Kent&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>On Abstraction</title>
      <link>https://wandersoncferreira.github.io/notes/on-abstraction/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/on-abstraction/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubex9pxbnfc4aq&#34;&gt;&lt;a href=&#34;https://youtu.be/x9pxbnFC4aQ&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Zach Tellman&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Difficult presentation because it deals with some very conceptual
topics, but Zach is very knowledgeable about his presentations there
are a lot of research behind it and we can tell how much effort he
made to deliver a good material and relevant.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The fundamental question of software is how do we deal with change&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I am going to watch this over and over, but I also need to read all
the material he suggested.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Abstraction&lt;/em&gt; maps the internal model onto external semantics.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;To think is to forget a difference, to generalize, to abstract. In
the overly replete world of Funes there were nothing but details,
almost contiguous details.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;An abstraction is useful only if its assumptions are sound&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If an abstraction can&amp;rsquo;t be discarded, it becomes coercive. What it
doesnt see might disapper.&lt;/p&gt;
&lt;p&gt;Software rould be easy, if it weren&amp;rsquo;t for changing environments. No
one tries to add a carwash to a bridge when it&amp;rsquo;s halfway built.&lt;/p&gt;
&lt;p&gt;Blind optimism isn&amp;rsquo;t a substitute for understanding.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Our models should be simplest thing that satisfices often enough&lt;/li&gt;
&lt;li&gt;When assumptions leak out, we have to use conventions&lt;/li&gt;
&lt;li&gt;Starting from scratch can be expensive&lt;/li&gt;
&lt;li&gt;Assumptions that &lt;em&gt;fail&lt;/em&gt; together &lt;em&gt;belong&lt;/em&gt; together&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The elements of clojure - by Zach Tellman&lt;/li&gt;
&lt;li&gt;Proof of Correctness of Data Representations - by Hoare&lt;/li&gt;
&lt;li&gt;The structure of scientific revolutions - by Thomas Kuhn&lt;/li&gt;
&lt;li&gt;The sciences of the Artificial - by Herbert A. Simon&lt;/li&gt;
&lt;li&gt;Funes the memorious - by Jorge Luis Borges&lt;/li&gt;
&lt;li&gt;Simulacra and Simulation - by Jean Baudrillard&lt;/li&gt;
&lt;li&gt;Seeing like a state - by James Scott&lt;/li&gt;
&lt;li&gt;Notes on the synthesis of form - by Christopher Alexander&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Improving Vim speed</title>
      <link>https://wandersoncferreira.github.io/notes/improving-vim-speed/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/improving-vim-speed/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeonuihlyzgaa&#34;&gt;&lt;a href=&#34;https://youtu.be/OnUiHLYZgaA&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Thoughbot&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Vim is great tool. I learned a lot from the mindset of vim users about
efficiency in editing text. I think there is not other place where you
can find advices and people obsessed with fewer keystrokes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invest time to sharp your editing skills!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stay away from insert mode. &lt;em&gt;In Emacs I should use more commands to
movement and editing.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Stop using arrow keys. &lt;em&gt;In Emacs I already do not do that too much
now.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Learn different move characteres&lt;/li&gt;
&lt;li&gt;If you hold any character consider this a smell&lt;/li&gt;
&lt;li&gt;Use more F and T to movement. &lt;em&gt;In Emacs it should be through
&lt;code&gt;jump-char&lt;/code&gt; package.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Use the repeat command. &lt;em&gt;I need to check this one out in Emacs, I
never used it.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Relative movements between lines should like a good idea in Emacs?
I don&amp;rsquo;t think so right now.&lt;/li&gt;
&lt;li&gt;Use some kind of fuzzy finder. &lt;em&gt;Right now I am using Projectile and
Ido mode that cover almost all my use cases right now.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Look how to use Vim Surround in Emacs, how to do that?&lt;em&gt;The answer
might be &lt;code&gt;wrap-region&lt;/code&gt; package.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The impedance mismatch is our fault</title>
      <link>https://wandersoncferreira.github.io/notes/impedance-mismatch/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/impedance-mismatch/</guid>
      <description>&lt;h3 id=&#34;infoq-linkhttpswwwinfoqcompresentationsimpedance-mismatch&#34;&gt;&lt;a href=&#34;https://www.infoq.com/presentations/Impedance-Mismatch/&#34;&gt;InfoQ Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, co-creator of Datomic&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Datomic is a very very interesting peace of technology, I should find
more time to work with this. I might look for a new side project to
experiment with new ideas.&lt;/p&gt;
&lt;p&gt;Stuart has shaped a lot of how I think about programming today, thanks
again.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;All information in the database is to be represented in only one way,
namely by valyes in column positions within row of tables&amp;rdquo; - by Codd&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&amp;hellip; Essentially the ORM can handle about 80-90% of the mapping
problems..&amp;rdquo; - by Martin Fowler&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I don&amp;rsquo;t slow down when you watch me&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read &amp;ldquo;The Vietnam of computer science&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t give up! If you simplify OO and RDMS, you will find the
building blocks for a general-purpose approach to data&lt;/li&gt;
&lt;li&gt;Read &amp;ldquo;The Vietnam of computer science a response&amp;rdquo;&lt;/li&gt;
&lt;li&gt;This is not related to performace, many round-trips, this is
related to data being changed while you are in the between of the
round trips&lt;/li&gt;
&lt;li&gt;Transactions are awesome&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Participe de projetos Código Aberto</title>
      <link>https://wandersoncferreira.github.io/blog/codigo-aberto/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/blog/codigo-aberto/</guid>
      <description>&lt;p&gt;Vou comentar um pouco minha trajetória que foi moldada de forma
integral por comunidades online.&lt;/p&gt;
&lt;p&gt;Em 2008 eu comecei meus primeiros passos na internet, além de jogar de
forma alucinada comecei a aprender 3D Studio Max e Blender. Na época
eu assistia muitos vídeos &lt;a href=&#34;https://youtu.be/eplAQ3fEr8M&#34;&gt;Xiao Xiao&lt;/a&gt; e
queria muito conseguir fazer igual em &lt;em&gt;Flash&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Começou ali uma aventura que me acompanha até os dias de hoje:&lt;/p&gt;
&lt;p&gt;Uma conta no iMaster e fui o membro mais chato e com pior português
possível por 3 meses seguidos &lt;em&gt;(é o máximo de tempo que um adolescente
de 16 anos consegue se comprometer com algo)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://wandersoncferreira.github.io/imaster.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Depois passei por fóruns e comunidades no ICQ, IRC, Orkut, Reddit,
Blogs pessoas, Blogs de jogos como Unreal, WYD, Mu online e diversos
outros clássicos tratando de temas desde Tire suas dúvidas para passar
no vestibular até grupos privados sobre Unix e Sísmica de Reflexão.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Legal, mas onde quero chegar?&lt;/strong&gt; Todas essas experiências me fizeram
entender como o processo de aprendizagem e cooperação online funciona
(pra mim), assim como quais benefícios de médio e longo prazo eles
podem trazer. Portanto quero fazer esse link com o mundo do
desenvolvimento de software usando alguns exemplos que eu tive.&lt;/p&gt;
&lt;h2 id=&#34;o-inicio-parece-impossível-mesmo&#34;&gt;O inicio parece impossível mesmo&lt;/h2&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Quem trabalha com Python e não gostaria de contribuir para o projeto
do &lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;? Biblioteca famosa,
22 mil commits, deve ter milhares de linhas de código, são 1900
pessoas diferentes contribuindo para o projeto. O que eu mortal posso
fazer?  &lt;em&gt;Muito!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://wandersoncferreira.github.io/pandas.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Porém, vamos para o começo.&lt;/p&gt;
&lt;p&gt;Um projeto como esse é uma empresa com as portas abertas. Ele tem suas
estruturas internas, pessoas responsáveis com papeis específicos,
hierarquia, &lt;em&gt;politica&lt;/em&gt;, etc. E o que você faz quando chega em um
emprego novo?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;onboarding&lt;/li&gt;
&lt;li&gt;tirar dúvidas com pessoas mais experientes&lt;/li&gt;
&lt;li&gt;leitura/estudo com relação ao domínio de negócio da empresa&lt;/li&gt;
&lt;li&gt;fazer tarefas pequenas e menos complexas&lt;/li&gt;
&lt;li&gt;se ambientar o suficiente para migrar para tarefas complexas&lt;/li&gt;
&lt;li&gt;liderar projetos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 
 
 &lt;/p&gt;
&lt;p&gt;Nesse caso é exatamente igual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basicamente todos os pontos acima você resolve participando e lendo
as &lt;em&gt;Issues&lt;/em&gt; e &lt;em&gt;Pull Requests&lt;/em&gt; dos projetos. * Não é tão raro projetos
usarem listas de discussão via &lt;em&gt;email&lt;/em&gt;, por exemplo,
&lt;a href=&#34;https://groups.google.com/forum/#!forum/clojure&#34;&gt;clojure&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 
 
 &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Importante:&lt;/em&gt; Comece fazendo tarefas pequenas!! É comum os projetos
colocarem indicadores nos problemas para orientar os novatos, como
&lt;em&gt;good first issue&lt;/em&gt;, &lt;em&gt;easy&lt;/em&gt;, &lt;em&gt;documentation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Exemplos que participei:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentação pandas &lt;em&gt;group-by&lt;/em&gt; [python]: &lt;a href=&#34;https://github.com/pandas-dev/pandas/pull/14801&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Documentação &lt;em&gt;reitit&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/metosin/reitit/commit/fbe2f625765259e3b9ec0448395c4349cb134cdf&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adicionar &lt;em&gt;dicas&lt;/em&gt; sobre tipos onde o autor esqueceu &lt;em&gt;reitit&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/metosin/reitit/commit/f7e4136e0e777c4d05200c82c12d34c1e676f51f&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Literalmente adicionei aspas no &lt;em&gt;organic-green&lt;/em&gt; [elisp]: &lt;a href=&#34;https://github.com/kostafey/organic-green-theme/commit/2f4942abc824c55412da3e8f7bd7a316640a2a74&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adicionei 7 palavras no &lt;em&gt;spec-tools&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/metosin/spec-tools/pull/227&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;inglês&#34;&gt;Inglês&lt;/h2&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img
  src=&#34;https://wandersoncferreira.github.io/prog.png&#34;
  width=&#34;600&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;Ponto importante, muito importante. Eu estudo Clojure, utilizo no
trabalho e muitas pessoas me perguntam se é muito difícil de aprender,
como se adaptar, etc. e eu tenho uma posição bem firme sobre o
assunto:&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A principal linguagem que causa dificuldades no trabalho é o inglês&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Isso é realidade ainda dentro de times de desenvolvimento. Conseguir
expor suas ideias de uma forma &lt;em&gt;inteligível&lt;/em&gt; é essencial. E porque?
Por que você vai ler bastante e precisar discutir com as pessoas sobre
o problema, sobre suas ideias para solução e sobre as ideias delas.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 mês discutindo [underline]#blacklist# em uma máquina de regras &lt;em&gt;clara-rules&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/cerner/clara-rules/pull/445&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Qual seria a melhor forma de fazer scan do código &lt;em&gt;clara-rules&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/cerner/clara-rules/pull/448&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Definir formato de estrutura de dados &lt;em&gt;pomidor&lt;/em&gt; [elisp]: &lt;a href=&#34;https://github.com/TatriX/pomidor/pull/33&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;ganhe-confiança-e-familiaridade&#34;&gt;Ganhe confiança e familiaridade&lt;/h2&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img
  src=&#34;https://wandersoncferreira.github.io/panda-cdn.jpg&#34;
  width=&#34;300&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;Com o tempo, lendo um pouco do código todo dia e ganhando mais
confiança você pode começar a corrigir aqueles problemas que você
esbarra no seu dia-a-dia no trabalho e até mesmo incluir
funcionalidades simples que facilitaria seu trabalho. &lt;em&gt;(ou algum
projeto pessoal seu)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download de uma imagem para o org-mode &lt;em&gt;org-download&lt;/em&gt; [elisp]: &lt;a href=&#34;https://github.com/wandersoncferreira/org-download/commit/bd8768630cb0554112bbf9b6010ae3bc1e131db6&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Suporte para quebrar captcha com base64 &lt;em&gt;python3-anticaptcha&lt;/em&gt; [python]: &lt;a href=&#34;https://github.com/AndreiDrang/python3-anticaptcha/commit/e1f0dac496f5ac7f5f3a7eef43d3d378b72e61c0&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Correção para tornar compatível com versões anteriores &lt;em&gt;spec-tools&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/metosin/spec-tools/pull/229&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;alguns-pontos-sobre-os-projetos-open-source&#34;&gt;Alguns pontos sobre os projetos Open Source&amp;hellip;&lt;/h2&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://wandersoncferreira.github.io/oogway.png&#34; width=&#34;500&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;Existe um ponto importante que eu gosto de lembrar, &lt;em&gt;o projeto não é
seu&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esse projeto de código aberto é do autor original, seja ele uma pessoa
ou uma empresa. Se você discorda de algo, não quer discutir ou tomou
uma carteirada, faça um &lt;em&gt;fork&lt;/em&gt; do projeto e evolua o &lt;em&gt;seu&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Se outras pessoas da comunidade concordam com seu ponto de vista,
então elas vão escolher livremente o uso da sua versão do código.&lt;/p&gt;
&lt;p&gt;Esse é um ponto critico porque algumas pessoas dedicam horas, as vezes
anos ao mesmo projeto e conseguem fazer parte de um comitê que tem
mais autonomia para tomar decisões sobre aquele projeto. &lt;em&gt;(Lembra?
Igual uma empresa&amp;hellip;)&lt;/em&gt; Porém ao fazer um investimento tão alto se as
coisas começam a ir em uma direção que você discorda, você pode se
sentir traído ou ofendido e acaba abandonando o projeto causando algum
tumulto online. &lt;em&gt;Isso é bastante comum.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Convenhamos, de fato é fácil se frustrar quando você tem aquela ideia
legal e quer que todo mundo também use, mas o autor da biblioteca não
te responde mais ou some do mapa. É um direito dele, não sabemos e nem
podemos supor quais são as suas prioridades e atividades correntes.&lt;/p&gt;
&lt;p&gt;E o oposto também é verdadeiro, as vezes você começa algo e perde o
interesse no meio do caminho.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Não seja esse maluco stalkeando o autor da biblioteca no Twitter:&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://wandersoncferreira.github.io/me.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gostei do tema &lt;em&gt;organic-green&lt;/em&gt; e resolvi refazê-lo para modernizar [elisp]: &lt;a href=&#34;https://github.com/kostafey/organic-green-theme/pull/3&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inclusão complexa de uma nova funcionalidade para o &lt;em&gt;spec-tools&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/metosin/spec-tools/pull/226&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Uma hora eu volto para rever isso, deixei de lado um tempo &lt;em&gt;reitit&lt;/em&gt; [clojure]: &lt;a href=&#34;https://github.com/metosin/reitit/pull/354&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;e-a-sua-vez-crie-seus-próprios-projetos&#34;&gt;E a sua vez, crie seus próprios projetos!!&lt;/h2&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img
  src=&#34;https://wandersoncferreira.github.io/tigress.jpg&#34;
  width=&#34;300&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;Pelas minhas contribuições em Elisp já dá para imaginar que eu gosto
dessa linguagem e não é para menos. A comunidade que existe em torno
do Elisp é excepcional e os conceitos embutidos são muito ricos.&lt;/p&gt;
&lt;p&gt;Em fevereiro de 2017 publiquei junto com um amigo o meu primeiro
pacote em Elisp que de fato teve algum usuário, o
&lt;a href=&#34;https://github.com/wandersoncferreira/helm-spotify-plus&#34;&gt;helm-spotify-plus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O pacote permite que você faça buscas e opere o Spotify através do
Emacs. Foi muito divertido fazer esse pacote e lutar com uma linguagem
antiga como o Elisp, hoje a biblioteca ocupa a posição de destaque
dentro do percentil 70% no repositório de pacotes &lt;em&gt;MELPA&lt;/em&gt;. Isso é bom?
&lt;em&gt;Para mim é ótimo!&lt;/em&gt; rsrs.&lt;/p&gt;
&lt;p&gt;Ao ter um pacote próprio com usuários você está sujeito a diversas
situações: i) programadores que gostaram da ideia e querem contribuir,
ii) aqueles que não veem sentido algum na sua ideia completamente
inútil.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adicionaram uma &amp;ldquo;playlist&amp;rdquo; usando queues no elisp &lt;em&gt;helm-spotify-plus&lt;/em&gt; [elisp]: &lt;a href=&#34;https://github.com/wandersoncferreira/helm-spotify-plus/pull/32&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mamulengo&lt;/em&gt; banco de dados em DataScript p/ aplicações pequenas [clojure]: &lt;a href=&#34;https://github.com/wandersoncferreira/mamulengo/issues/49&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;emacs.d&lt;/em&gt; minhas configs do Emacs, trabalho &lt;em&gt;diariamente&lt;/em&gt; desde 2016 [elisp]: &lt;a href=&#34;https://github.com/wandersoncferreira/dotfiles&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;meta-schema&lt;/em&gt; ideia de specs dinâmicas [clojure]: &lt;a href=&#34;https://github.com/wandersoncferreira/meta-schema&#34;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;mas-por-que-fazer-tudo-isso&#34;&gt;Mas por que fazer tudo isso?&lt;/h2&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img
  src=&#34;https://wandersoncferreira.github.io/not-to.jpeg&#34;
  width=&#34;500&#34; /&gt;
&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Primeira resposta óbvia é: &amp;ldquo;porque eu posso&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Mas falando sério, o ambiente do software de código aberto permite
você trocar experiencias com pessoas muito diferentes de você. Metade
dos meus códigos foram revisados por pessoas da Rússia, Finlândia,
Estônia, Israel, etc. Ler os códigos que eles fazem é entender um
pouco a forma como eles pensam, como estruturam soluções, como
implementam ideias abstratas em código palpável.&lt;/p&gt;
&lt;p&gt;No clássico texto do Peter Norvig &lt;a href=&#34;https://pihisall.wordpress.com/2007/03/15/aprenda-a-programar-em-dez-anos/&#34;&gt;Aprenda a programar em 10
anos&lt;/a&gt;,
precisamos nos colocar em diversas situações diferentes para poder
evoluir profissionalmente.&lt;/p&gt;
&lt;p&gt;Tem projetos onde você é o que domina melhor o tema, em outros você é
o mais novato. Participar e vivenciar as duas experiências é
extremamente enriquecedor.&lt;/p&gt;
&lt;p&gt;Independente de onde você trabalha, você não vai poder discutir por 1
mês se 150 linhas de códigos devem ou não ser adicionados da maneira X
ou Y porque não temos esse luxo em ambiente corporativo. Porém você
precisa dessa experiência, precisa ir mais fundo no problema, aprender
a antecipar implicações importantes.&lt;/p&gt;
&lt;p&gt;Software é uma profissão de prática, espero ter motivado algumas
pessoas para participar dessa jornada também!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Happy Hacking!&lt;/em&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Summary readings: March - April 2020</title>
      <link>https://wandersoncferreira.github.io/blog/summary-readings-march-april/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/blog/summary-readings-march-april/</guid>
      <description>&lt;p&gt;I follow &lt;a href=&#34;https://eli.thegreenplace.net/&#34;&gt;Eli Bendersky&lt;/a&gt; blog and he
produces a very simple and not so detailed summary of all his book
readings from time to time. This is very useful because I like to read
and one of the most difficult tasks for me is searching &lt;em&gt;what&lt;/em&gt; to read
(you know, time is limited).&lt;/p&gt;
&lt;p&gt;Therefore, I decided to do the same. I also try to keep track of my
&lt;em&gt;to-read&lt;/em&gt; and &lt;em&gt;read&lt;/em&gt; books since 2016 at
&lt;a href=&#34;https://www.goodreads.com/user/show/85018850-wanderson-ferreira&#34;&gt;Goodreads&lt;/a&gt;,
I hope to help someone else choosing the next book.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;1-surely-youre-joking-mr-feynman---by-richard-p-feynman&#34;&gt;1. &lt;em&gt;Surely You&amp;rsquo;re Joking Mr. Feynman!&lt;/em&gt; - by Richard P. Feynman&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You should go to some other school. You should find out how the rest
of the world it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ndash; Professor Slate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Link: &lt;a href=&#34;https://www.amazon.com/What-Care-Other-People-Think-ebook/dp/B004OA6KIS/ref=sr_1_2?crid=LILHFC7OIE0&amp;amp;dchild=1&amp;amp;keywords=surely+you+are+joking&amp;amp;qid=1587699386&amp;amp;s=digital-text&amp;amp;sprefix=surely+you+are%2Cdigital-text%2C285&amp;amp;sr=1-2&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rated: 5/5&lt;/li&gt;
&lt;li&gt;Read again? Yes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I postponed this reading for a long time, but what a bad decision!.
This book is very nice! As a previous (geo)physicist student, I very
often you read and listened about the great work of some scientists
and Feynman was definitely one of them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I study at Universidade de São Paulo and Feynman came to Brazil and
was there for a while (there is even a chapter about that!!) so he was
&lt;em&gt;the&lt;/em&gt; figure!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This book shows how &lt;em&gt;human&lt;/em&gt; Feynman was! He had an incredible
curiosity and willpower to act upon his experiments. So many funny
histories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;He described one of this presentation about his academic work and on
the audience was Einstein, Oppenheimer, Norris Russell, von Neumann,
and many others. Wow! I personally relate to that because in 2014 I
presented my findings in Houston to many great geophysicist that I had
only met before by reading their work on journals. The feeling is
great, rush of adrenaline when you start talking about the subject
that you have been investigating for 2 years in a row .. you &lt;em&gt;think&lt;/em&gt;
you are the expert.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;So I have just one wish to you &amp;ndash; the good luck to be somewhere
where you are free to maintain the kind of integrity I have described,
and where you do not feel forced by a need to maintain your position
in the organization, or financial support, or so on, to lose your
integrity. May you have that freedom.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;2-the-complete-problem-solver---by-john-r-hayes&#34;&gt;2. &lt;em&gt;The Complete Problem Solver&lt;/em&gt; - by John R. Hayes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;People can influence their own learning processes and have a great
deal to gain by doing so. By 1. choosing to distribute practice, 2.
select appropriate learning strategies, and 3. using evaluation of
progress to control study.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Link: &lt;a href=&#34;https://www.amazon.com/Complete-Problem-Solver-John-Hayes-ebook/dp/B00C7TB1XM/ref=sr_1_1?dchild=1&amp;amp;keywords=the+complete+problem+solver&amp;amp;qid=1587699347&amp;amp;s=digital-text&amp;amp;sr=1-1&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rated: 3/5&lt;/li&gt;
&lt;li&gt;Read again? No&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;More detail and technical explanation about the components involved
at &lt;em&gt;solving problems&lt;/em&gt; such as &lt;em&gt;memory&lt;/em&gt;, &lt;em&gt;proper problem
representation&lt;/em&gt;, &lt;em&gt;learning&lt;/em&gt;, &lt;em&gt;creativity&lt;/em&gt; and &lt;em&gt;decision making&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is indeed interesting, but I think if you are into some of these
subjects you already know 80% of this book. However, if you are only
interested in starting, this is a very dense read. Therefore, I do not
find it worthy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a nice study about creativity though.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] These results &lt;em&gt;do not&lt;/em&gt; mean that there is no such thing as
genius. They &lt;em&gt;do not&lt;/em&gt; mean that just anyone with 10 to 25 years of
experience can write great music. They &lt;em&gt;do&lt;/em&gt; mean that even a person
endowed with the genius of Mozart or Beethoven will need 10 years
or more of intense preparation to be creative.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-the-clean-coder---by-robert-c-martin-uncle-bob&#34;&gt;3. &lt;em&gt;The Clean Coder&lt;/em&gt; - by Robert C. Martin (Uncle Bob)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;All professionals practice their art by engaging in skill-sharpening
exercises. Musicians rehearse scales, Football players run through
tires, &lt;em&gt;Doctors&lt;/em&gt; practice sutures and surgical techniques, &lt;em&gt;Lawyers&lt;/em&gt;
practice arguments. When performance matters, professionals
practice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Link: &lt;a href=&#34;https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers-ebook/dp/B0050JLC9Y/ref=sr_1_1?dchild=1&amp;amp;keywords=the+clean+coder&amp;amp;qid=1587699322&amp;amp;s=digital-text&amp;amp;sr=1-1&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rated: 4/5&lt;/li&gt;
&lt;li&gt;Read again? Yes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Easy and good to read, the message is harsh towards &lt;em&gt;programmer&amp;rsquo;s
profissionalism&lt;/em&gt; and very eye opener.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It starts with a history about a project where the business manager
was paired up with the technical leader and they were kicking in all
the obstacles to deliver all the features, working really intense
hours to deliver on time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, at the release date the &lt;em&gt;legal department&lt;/em&gt; could not
finish a necessary contract to go live.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The technical leader says to the business manager: &amp;ldquo;ok, let&amp;rsquo;s do our
thing again and go there and ask them to finish this two pages by the
end of the day!&amp;rdquo; and the answer caught the technical leader with great
surprise: &lt;em&gt;&amp;ldquo;we cannot do this, they are real professionals&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait a moment! Wait a moment&amp;hellip;!! What am I? Wait a moment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The software development &lt;em&gt;has&lt;/em&gt; processes, rituals and ways at we
can act and perform like professionals and most of the time we &lt;em&gt;should
not violate&lt;/em&gt; these &lt;em&gt;principles&lt;/em&gt; because of our work ethics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We might negotiate with business people the correct estimates to
deliver everything, and we &lt;em&gt;are&lt;/em&gt; professionals, we &lt;em&gt;want&lt;/em&gt; to deliver
the product, we are a member of this organization, we work on the
company&amp;rsquo;s side. There are no reasons for me to be lying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is difficult. Because the developers itself does not take
themselves serious enough, how can the management do it so?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;A Language of commitment: Say. Mean. Do.  &amp;ndash; Roy Osherove.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;4-the-joy-of-clojure---by-michael-fogus&#34;&gt;4. &lt;em&gt;The Joy of Clojure&lt;/em&gt; - by Michael Fogus&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you give someone Fortran, he has Fortran. If you give someone
Lisp, he has any language he pleases. &amp;ndash; Guy Steele&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Link: &lt;a href=&#34;https://www.amazon.com/Joy-Clojure-Michael-Fogus/dp/1617291412/ref=sr_1_1?dchild=1&amp;amp;keywords=joy+of+clojure&amp;amp;qid=1587699263&amp;amp;s=digital-text&amp;amp;sr=1-1-catcorr&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rated: 5/5&lt;/li&gt;
&lt;li&gt;Read again? Always reaching out!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sometimes is not clear to people when I say that I am studying
Clojure. The language itself has lots of interesting bits, but very
often the subjects that interest me most are the reasoning behind
how Clojure was design and how it is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fogus goes deep in each aspect of the language and provides several
valuable references to papers or books in order to improve our
understanding about the concepts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fact that Clojure was designed &amp;ldquo;by/to experienced programmers&amp;rdquo;
makes it very interesting to me. I haven&amp;rsquo;t participated in
communities with such a high quality discussions and support.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;It requires a very unusual mind to undertake the analysis of the
obvious. &amp;ndash; Alfred North Whitehead&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;5-meditations---by-marcus-aurelius&#34;&gt;5. &lt;em&gt;Meditations&lt;/em&gt; - by Marcus Aurelius&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The first rule is to keep an untroubled spirit. The second is to
look things in the face and know them for what they are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Link: &lt;a href=&#34;https://www.amazon.com/Meditations-AmazonClassics-Marcus-Aurelius-ebook/dp/B07QQRGH6R/ref=sr_1_2?crid=CQUKNCRBJHCO&amp;amp;dchild=1&amp;amp;keywords=meditations+by+marcus&amp;amp;qid=1587699224&amp;amp;s=digital-text&amp;amp;sprefix=medidations%2Cdigital-text%2C292&amp;amp;sr=1-2&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rated: 4/5&lt;/li&gt;
&lt;li&gt;Read again? Maybe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Very easy read, Marcus Aurelius was an Roman Emperor and also a
Stoic Philosopher.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I read this book right after reading the &lt;a href=&#34;https://www.amazon.com/Zen-Mind-Beginners-Informal-Meditation-ebook/dp/B00I8USOM0/ref=pd_sbsd_14_1/136-4339934-2460642?_encoding=UTF8&amp;amp;pd_rd_i=B00I8USOM0&amp;amp;pd_rd_r=e82a0562-5bc2-496b-aeff-ddef62decae3&amp;amp;pd_rd_w=wzsZ2&amp;amp;pd_rd_wg=TNaZz&amp;amp;pf_rd_p=2c2d0d3b-b3c5-4110-93fa-2c1270309ac1&amp;amp;pf_rd_r=ZG3N26GRJBCNETGJ5XTD&amp;amp;psc=1&amp;amp;refRID=ZG3N26GRJBCNETGJ5XTD&#34;&gt;Zen
Mind&lt;/a&gt;,
which is a book about Zen Practice and Buddhism, and I was astonished
to notice so many similarities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is basically a Twitter Account from 120d.C. Amazing to see how
he thinks and his priorities back them, also some chad of light about
society. You should definitely read it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember two things:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;that everything has always been the same, and keeps recurring,
and it makes no difference whether you see the same things recur in
a hundred years or two hundred, or in an infinite period;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;that the longest-lived and those who will die soonest lose the
same thing. The present is all that they can give up, since that is
all you have, and what you do not have you cannot lose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Happy reading!&lt;/em&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Maybe Not</title>
      <link>https://wandersoncferreira.github.io/notes/maybe-not/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/maybe-not/</guid>
      <description>&lt;h3 id=&#34;youtubehttpsyoutubeyr5wdgrpouglistplzdclr02grlrewkazv-5qbuzk0zgkoocr&#34;&gt;&lt;a href=&#34;https://youtu.be/YR5WdGrpoug?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&#34;&gt;Youtube&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;I call it my billion-dollar mistake. It was the invention of the null
reference in 1965 - by Tony Hoare.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Where are nulls/options used?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;optional requirements (args)
&lt;ul&gt;
&lt;li&gt;variadics and kwargs mitigate in Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;conditional provision (returns)
&lt;ul&gt;
&lt;li&gt;managing partial information (aggregates)&lt;/li&gt;
&lt;li&gt;not idiomatic in Clojure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Maps vs Records/Fields&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maps are (mathematical) functions!&lt;/li&gt;
&lt;li&gt;simplest functions in programming
&lt;ul&gt;
&lt;li&gt;keyset -&amp;gt; vals&lt;/li&gt;
&lt;li&gt;no code, no categories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What do we want?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maximize schema reuse
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t want context-driven proliferation
&lt;ul&gt;
&lt;li&gt;yields more code, less reuse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;support symmetric request/response
&lt;ul&gt;
&lt;li&gt;call partially filled in, get more filled in&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;information-building pipelines
&lt;ul&gt;
&lt;li&gt;many partial information increments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Maps are the most fundamental functions in programming&lt;/li&gt;
&lt;li&gt;You can flow information through systems that they doesn&amp;rsquo;t know
about and doesn&amp;rsquo;t care about it.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The Joys and Perils of Interactice Development</title>
      <link>https://wandersoncferreira.github.io/notes/joys-and-perils/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/joys-and-perils/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube-rafcpniyco&#34;&gt;&lt;a href=&#34;https://youtu.be/-RaFcpNiYCo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Sierra, consultant&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Everybody that work with Clojure can relate to the problems described
by Stuart, however the REPL-driven development is just so good to have
around.&lt;/p&gt;
&lt;p&gt;We must improve our toolings around it.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;[Remote Agent] was written entirely in Common Lisp despite
unrelenting political pressure to move to C++.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;We were not out to win over the Lisp programmers; we were after the
C++ programmers. We managed to drag a lot of them about halfway to
Lisp.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Definitions (source code in files) != Definitions (in language
runtime)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Debugging a program running on a $100M piece of hardware that is 100
million miles away is an &lt;em&gt;interesting experience&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Having a &lt;em&gt;read-eval-print-loop&lt;/em&gt; running on the spacecraft proved
invaluable in finding and fixing the problem&amp;rdquo; - by Ron Garret.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When you redefine a macro, you must reload all the code that uses it&lt;/li&gt;
&lt;li&gt;The Remote Agent Experiment: Debugging Code from 60 million miles
away (Google Tech Talks) - by Ron Garret&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Preventing the Collapse of Civilization</title>
      <link>https://wandersoncferreira.github.io/notes/preventing-collapse-civilization/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/preventing-collapse-civilization/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubepw-sodj4kkk&#34;&gt;&lt;a href=&#34;https://youtu.be/pW-SOdj4Kkk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jonathan Blow, consultant&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;This is why technology degrades. It taks a lot of energy to
communicate from generation to generation there are losses. Without
generational transfer, civilization dies.&lt;/p&gt;
&lt;p&gt;Thesis: Software is in decline; we depend on software
everywhere. Collapse look slow from the inside.&lt;/p&gt;
&lt;p&gt;Software has been riding on immense hardware improvements.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t expect software to work any more. How low will our standards
to shrink?&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;1177BC: The year civilization collapsed by Eric Cline&lt;/li&gt;
&lt;li&gt;Removing complexity is the right short-term play, even if it
doesn&amp;rsquo;t seem so&lt;/li&gt;
&lt;li&gt;Blog post from Nikita: &lt;a href=&#34;https://tonsky.me/blog/good-times-weak-men/&#34;&gt;https://tonsky.me/blog/good-times-weak-men/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video: The thirty million line problem - by Casey Muratori&lt;/li&gt;
&lt;li&gt;Video: Civilizations: Institutions, Knowledge and the Future by Samo Burja&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Design and Implementation of Bitemporal DBMS</title>
      <link>https://wandersoncferreira.github.io/notes/design-and-implementation-of-bitemporal-dbms/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-and-implementation-of-bitemporal-dbms/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeyjavsvygbuulistplethprqvx4a-c3kdrtxxwgrmemutl8apf&#34;&gt;&lt;a href=&#34;https://youtu.be/YjAVsvYGbuU?list=PLetHPRQvX4a-c3KDRTxxwGRmEMutL8Apf&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Hákan Raberg, clojure developer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The amount of knowledge hidden in the world is incredible. Almost all
of these projects when explained makes me feel happy that I can grasp
the whole idea and I know I can understand the inner workings and
maybe start to contribute to some of these ideas.&lt;/p&gt;
&lt;p&gt;I would like to be more involved with very rigorous projects
like this one. One day!&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;A bitemporal table is a glorious structure&lt;/strong&gt;. It simultaneously
records the history of the enterprise, while also capturing the
sequence of record of that history.&amp;rdquo;&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transaction time&lt;/strong&gt;: may be implemented using transaction commit
times, and are system-generated and -supplied.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Valid time&lt;/strong&gt;: Is the time when the fact is true in the modeled
reality. Valid times are usually supplied by the user.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bitemporal time - slice queries&lt;/strong&gt;: takes as input two instants, a
valid-time and a transaction-time instant, and results in a snapshot
state of the information regarding the enterprise at that valid
time, as recorded in the database at that transaction time.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read more papers about computer science!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.cs.arizona.edu/~rts/tdbbook.pdf&#34;&gt;Developing Time-Oriented database applications in SQL&lt;/a&gt; - by Richard Snodgrass&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.arizona.edu/~rts/pubs/SIGMODRecordMarch94p52.pdf&#34;&gt;A consensus glossary of temporal database concepts&lt;/a&gt; - CS Jensen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cs.ulb.ac.be/public/_media/teaching/infoh415/tempfeaturessql2011.pdf&#34;&gt;Temporal Features in SQL 2011&lt;/a&gt; - by Krishna&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://wandersoncferreira.github.io/notes/functional-programming/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/functional-programming/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubez0n1az6snbk&#34;&gt;&lt;a href=&#34;https://youtu.be/z0N1aZ6SnBk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Erik Meijer, computer scientist and software developer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Very good explanation about FP. It uses Haskell a lot as example but
all the concepts are easy to grasp. I made parallels with Clojure
while reading his lesson.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The concept of honest and disonest programming languages is about
tricking you to think the functions and method behaves in specific way
that you can&amp;rsquo;t predict.&lt;/p&gt;
&lt;p&gt;A lambda expression is a delegate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;nb&#34;&gt;class &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Delegate&amp;lt;T&lt;/span&gt;,&lt;span class=&#34;nv&#34;&gt;R&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A class is a superset of lambda expressions in .NET and other
languages. Lambda expressions is not about FP or Purity, they are all
about capturing closures.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FP definition is simple: Programming with mathematical functions!&lt;/li&gt;
&lt;li&gt;Everytime someone wants to make effects you have to pass a global
variable around. You have to pass the whole world around.&lt;/li&gt;
&lt;li&gt;Lambda expressions can provide you with closures and anonymous fns.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Transducers</title>
      <link>https://wandersoncferreira.github.io/notes/transducers/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/transducers/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube6mtbuzafcii&#34;&gt;&lt;a href=&#34;https://youtu.be/6mTbuzafcII&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I already watched this talk more than one year ago. And today I feel
very happy because I could understand 80% of that was said about
transducers and better yet, 100% of the problem that transducer
attempt to solve.&lt;/p&gt;
&lt;p&gt;This is a good proxy that I am learning =)&lt;/p&gt;
&lt;p&gt;Rich talks are always very bright and full of ideas and provocations
to your day-to-day job. It&amp;rsquo;s up to you to translate them and apply
succefully.&lt;/p&gt;
&lt;p&gt;The journey continues!&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;What they are?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract the &lt;strong&gt;essence&lt;/strong&gt; of map, filter et al&lt;/li&gt;
&lt;li&gt;away from the functions that transform sequences/collections&lt;/li&gt;
&lt;li&gt;recasting them as &lt;strong&gt;process transformations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;What kind of processes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ones that can defined in terms of a &lt;strong&gt;succession&lt;/strong&gt; or &lt;strong&gt;steps&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;where each step &lt;strong&gt;ingests&lt;/strong&gt; an &lt;strong&gt;input&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Transducers are fully decoupled&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;know nothing of the process they modify&lt;/li&gt;
&lt;li&gt;may call step 0, 1 or more times&lt;/li&gt;
&lt;li&gt;can transform input arg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Early Termination&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduction normally processes all input&lt;/li&gt;
&lt;li&gt;Sometimes a process has just &amp;lsquo;had enough&amp;rsquo; input, or gotten external trigger to terminate&lt;/li&gt;
&lt;li&gt;A transducer might decide the same&lt;/li&gt;
&lt;li&gt;code example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;comp&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapcatting&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;unbundle-pallet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;taking-while&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;non-ticking?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;filtering&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;non-food?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapping&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;label-heavy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;code-snippet&#34;&gt;Code Snippet&lt;/h2&gt;
&lt;p&gt;Process to early terminate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;taking-while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pred&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;step&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;reduced&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A stateful transducer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dropping-while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pred&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;volatile!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;drop?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;drop?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pred&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;vreset!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dv&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;step&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We can&amp;rsquo;t be reimplementing the same thing over and over again.&lt;/li&gt;
&lt;li&gt;Manu list fns can be defined in terms of &lt;em&gt;foldr&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;encapsulates the recursion&lt;/li&gt;
&lt;li&gt;easier to reason about and transform&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Transducers &lt;em&gt;must&lt;/em&gt; support arity-0 init in terms of a call to the
nested init.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.ox.ac.uk/files/3390/PRG69.pdf&#34;&gt;Lectures on Constructive Functional Programming&lt;/a&gt; - by RS Bird&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.nott.ac.uk/~pszgmh/fold.pdf&#34;&gt;A tutorial on the universality and expressiveness of fold&lt;/a&gt; - by Graham Hutton&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Extreme Programming 20 years later</title>
      <link>https://wandersoncferreira.github.io/notes/extreme-programming/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/extreme-programming/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubecgutmoudfbo&#34;&gt;&lt;a href=&#34;https://youtu.be/cGuTmOUdFbo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Kent Beck, Facebook Advisor Programmer&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I hardly can comment on Extreme Programming for now, but the ideas
that Kent is telling are no much distant from common sense in a way.&lt;/p&gt;
&lt;p&gt;For me, is very plausible that he came with all the basics for this
framework only by &lt;em&gt;making stuff up&lt;/em&gt;. After awhile, he noticed that
everything was well funded in experience reports.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Extreme Programming has three weeks interaction with stories and
testing&lt;/p&gt;
&lt;p&gt;If you have a dump idea, figure out the most cheap way to try it
out. They are always worth trying&lt;/p&gt;
&lt;p&gt;I am the owner of my code and I am responsible for its quality and
performance&lt;/p&gt;
&lt;p&gt;Extreme Programming matches the behavior of programmers in the wild&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I may need to experiment Smalltalk for a while&lt;/li&gt;
&lt;li&gt;Always be informed by data&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Toyota-Production-System-Beyond-Large-Scale/dp/0915299143&#34;&gt;Toyota Production System: Beyond Large-Scale Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658&#34;&gt;Extreme Programming Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Is TDD dead?</title>
      <link>https://wandersoncferreira.github.io/notes/is-tdd-dead/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/is-tdd-dead/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubez9quxzslcfo&#34;&gt;&lt;a href=&#34;https://youtu.be/z9quxZsLcfo&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;David Hansson, Martin Fowler and Kent Beck&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Yes, this debate was good to listen. Kent Beck itself really talking
about how the thing came to be. TDD is very nice for some workflows,
but the path to fast feedback loop is alwaaayyss desireble. That is
the main reason I see some people in the Clojure community advocating
about REPL-driven development instead of TDD.&lt;/p&gt;
&lt;p&gt;You can have immediate feedback of your running system! This the
supreme case for fast feedback loops.&lt;/p&gt;
&lt;p&gt;However, there are also some people that speak with the sole, unique
truth by their side. You should use TDD or you are &lt;em&gt;NOT&lt;/em&gt; a
professional.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen talks from Uncle Bob saying something like that. Really?
That defines me? I&amp;rsquo;ve been trying really hard to understand how can a
testable code provide a better design architecture only by being
testable.&lt;/p&gt;
&lt;p&gt;In my point of view, it looks like one more subject that programmers
like to debate to run away from the real problems. TDD you can
control, is under your choices. But there are complex stuff happening
at the business domain level, techinical requirements like distributed
systems, concurrency, auditable, and many others that are way more
complicated to define.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s agree that the definitions of professionalism in software
development is way far from being defined. It&amp;rsquo;s a hacky community and
I really like that way.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;TDD helps you with anxiety in programming craft&lt;/p&gt;
&lt;p&gt;I feel it is very hard to write test first before I see the code&lt;/p&gt;
&lt;p&gt;We should always think about how can we tweak the design to the code
be testable&lt;/p&gt;
&lt;p&gt;The isolation of unit testing is not mandatory inside the idea of TDD&lt;/p&gt;
&lt;p&gt;Fallacy: Because your code is more testable, it has a better design&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Can we be confident about your work? We should.&lt;/li&gt;
&lt;li&gt;Some parts of the project you can use TDD and some others you simply can&amp;rsquo;t&lt;/li&gt;
&lt;li&gt;Kent works from specific to general and TDD is good in this way&lt;/li&gt;
&lt;li&gt;I barely mock stuff&lt;/li&gt;
&lt;li&gt;Have self-testing code is critical. Have a command that can test
your entire system&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Jim Coplien and Bob Martin Debate TDD</title>
      <link>https://wandersoncferreira.github.io/notes/debate-tdd/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/debate-tdd/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubekthqgs3zfam&#34;&gt;&lt;a href=&#34;https://youtu.be/KtHQGs3zFAM&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jim Coplien and Bob Martin&lt;/p&gt;
&lt;h2 id=&#34;thought&#34;&gt;Thought&lt;/h2&gt;
&lt;p&gt;There are so many mixed feelings about TDD that I can&amp;rsquo;t produce
significant comments around it without being in the position of
contradict myself in two months from now.&lt;/p&gt;
&lt;p&gt;Fact is, people misuse a lot of what TDD &lt;em&gt;I think&lt;/em&gt; should do, by
saying that test is the only thing that matter. And in practice, I see
really big changes in design driven by business domain knowledge.&lt;/p&gt;
&lt;p&gt;Reality is that developers does not like to understand much about
their domains and are always concerned with small words they learn on
the internet about topics that cannot easily reach agreement.&lt;/p&gt;
&lt;p&gt;I prefer for now, to concern myself with other issues around code
development.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;[Jim Coplien] I don&amp;rsquo;t accept the thesis that the practice of TDD is a
pre-requisite for professionalism in software development in 2007&lt;/p&gt;
&lt;p&gt;[Jim Coplien] You want to capitalize yourself with knowledge upfront. Make
some hard decisions upfront&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t hide a bad architecture with a great interface&lt;/p&gt;
&lt;p&gt;Where is code, is bugs&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We need a good definition for professionalism in the area?&lt;/li&gt;
&lt;li&gt;Test by contract, pré-conditions, post-conditions and invariants&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>What went wrong with the IT-industry?</title>
      <link>https://wandersoncferreira.github.io/notes/what-went-wrong/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/what-went-wrong/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubegpp7bleg214&#34;&gt;&lt;a href=&#34;https://youtu.be/gPP7Bleg214&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;James Coplien, researcher in the field o computer science&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I should look for more papers in the area of software
development. Opinions are really what control the industry of software
development.&lt;/p&gt;
&lt;p&gt;The whole thing about agile methods, in the beginning, was about how
do you get the domain knowledge from your organization.&lt;/p&gt;
&lt;p&gt;One of the things I like about my current job is that I am able to get
better at domain knowledge, I am surrounded about great people that
think really different about how the credit system should behave in
the future.&lt;/p&gt;
&lt;p&gt;Great pensmanship does not make great writers.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The things we do have no rational basis. It is at least an Art&lt;/p&gt;
&lt;p&gt;Test-first fundamentalism is like abstinence-only sex education: An
unrealistic, ineffective morality campaign for self-loathing and
shaming&lt;/p&gt;
&lt;p&gt;There is no evidence that TDD does work&lt;/p&gt;
&lt;p&gt;People believe in things that can control, not in things that work&lt;/p&gt;
&lt;p&gt;Ignorance leads to overconfidence, inability to recognize skill, and
inability to assess one&amp;rsquo;s own level&lt;/p&gt;
&lt;p&gt;programming skill in the absence of business domain knowledge is
becoming increasing worthless&lt;/p&gt;
&lt;p&gt;software development process is exploratory by nature&lt;/p&gt;
&lt;p&gt;You are not paid to type! You are paid to think&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stop using opinions, we should provide more DATA to prove our point
of view&lt;/li&gt;
&lt;li&gt;You should look for where is your domain expertise&lt;/li&gt;
&lt;li&gt;We need understanding of DEEP CONTEXT&lt;/li&gt;
&lt;li&gt;You really need to study DOMAIN KNOWLEDGE&lt;/li&gt;
&lt;li&gt;Fight YAGNI: think ahead and plan&lt;/li&gt;
&lt;li&gt;Get rid of architects who do not code&lt;/li&gt;
&lt;li&gt;Get rid of coders without an HCI background&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/hard-thing-software-development-jesse-watson/&#34;&gt;Hard things about software development&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com.br/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/ref=sr_1_1?adgrpid=80727398585&amp;amp;gclid=CjwKCAiA9JbwBRAAEiwAnWa4Q5t16BYewHP8yNYJcXSTH7KXhC4pVG4cSFbG-rS0nz1K_J5h3dTKvBoCDp8QAvD_BwE&amp;amp;hvadid=392939680252&amp;amp;hvdev=c&amp;amp;hvlocphy=1001773&amp;amp;hvnetw=g&amp;amp;hvpos=1t1&amp;amp;hvqmt=e&amp;amp;hvrand=6991544172480746308&amp;amp;hvtargid=kwd-25827466034&amp;amp;hydadcr=5653_10696953&amp;amp;keywords=thinking+fast+and+slow&amp;amp;qid=1577505583&amp;amp;sr=8-1&#34;&gt;Thinking fast, thinking slow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Core Design Principles for Software Developers</title>
      <link>https://wandersoncferreira.github.io/notes/core-design-principles/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/core-design-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-videoshttpsyoutubellggo74uxmi&#34;&gt;&lt;a href=&#34;https://youtu.be/llGgO74uXMI&#34;&gt;Youtube Videos&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Venkat Subramaniam, Founder of Agile Developer, Inc.&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The presentations from Venkat are always interesting to watch. There
are several good guidelines to software development in general, but
also related to OOP with some principles like polymorphism and
open/close as good thing we should also strive for.&lt;/p&gt;
&lt;p&gt;Not sure about some peculiarities he seems to pay really attention
for, for example, DRY and IDE. However, I need to keep studying these
principles because I feel there are some good patterns here to be used
in other worlds as well.&lt;/p&gt;
&lt;p&gt;I will look for some exercises focusing the SOLID principles. Maybe
should be a good idea to go out for my current code and try to find
places where I already violate some of these principles.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Software is never written, it is always rewritten&lt;/p&gt;
&lt;p&gt;Keep it simple, stupid&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; keeps you focused&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Simple&lt;/em&gt; solves only real problem we know about&lt;/p&gt;
&lt;p&gt;Worst form of coupling - Inheritance&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Subject the design to changes along the way and see how it reacts
to it&lt;/li&gt;
&lt;li&gt;To create good design first step is let go of the ego&lt;/li&gt;
&lt;li&gt;Be unemotional&lt;/li&gt;
&lt;li&gt;Take time to review design and code&lt;/li&gt;
&lt;li&gt;You Are Not Gonna Neet It - Think YAGNI&lt;/li&gt;
&lt;li&gt;Try to see if you can remove coupling&lt;/li&gt;
&lt;li&gt;Focus on Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t comment what, instead comment why&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Making Architecture Matter</title>
      <link>https://wandersoncferreira.github.io/notes/make-architecture-matter/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/make-architecture-matter/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubedngazywmgr0&#34;&gt;&lt;a href=&#34;https://youtu.be/DngAZyWMGR0&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Martin Fowler, Chief Scientist at ThoughtWorks&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small keynote but with good ideas about software architecture. I
really like the work of Martin Fowler and his view over this problem,
I feel how hard it is to move at the speed that startups needs/desire
and keep good architecture choices around. The business domain is
constantly changing, priorities are crazy depending on the week and
the idea of losing the race because we can&amp;rsquo;t provide better solution
now instead of &amp;ldquo;so-so&amp;rdquo; solutions is terrifying.&lt;/p&gt;
&lt;p&gt;Maybe this environment is just doomed to be re-written if the company
turns out successful. Internal quality is hard to be taken into
consideration specially when even high-quality workers are so scarce
in the market.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Expert developers&amp;rsquo; shared understandinf of the system design is
architecture&lt;/p&gt;
&lt;p&gt;The set of design decisions that you wish you could get right early on&lt;/p&gt;
&lt;p&gt;Architecture is a social thing&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What you want to do, when project grows is that everybody has a
shared understanding&lt;/li&gt;
&lt;li&gt;What we consider to be the most important thing of the system?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://files.catwell.info/misc/mirror/2003-martin-fowler-who-needs-an-architect.pdf&#34;&gt;Who needs an
architect?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/DesignStaminaHypothesis.html&#34;&gt;Design Stamina Hypothesis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Kill &#39;Microservices&#39; before its too late</title>
      <link>https://wandersoncferreira.github.io/notes/kill-microservices/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/kill-microservices/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube-ukepd2ipek&#34;&gt;&lt;a href=&#34;https://youtu.be/-UKEPd2ipEk&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Chad Fowler, CTO of Wunderlist&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;I want to build systems that will survive.&amp;rdquo; I also have this feeling
that software cannot last for long without turning into unmanageble
pile of code. Interesting to see different points of view, John
Ousterhout in his presentation about &lt;em&gt;software design&lt;/em&gt; provided us
with his point of view that &lt;em&gt;length&lt;/em&gt; of code base does not really
matter and &lt;em&gt;depth&lt;/em&gt; would be the main thing to look for.&lt;/p&gt;
&lt;p&gt;Chad is a proponent of &lt;em&gt;tiny components&lt;/em&gt;. They are not talking about
exactly the same thing, but it&amp;rsquo;s interesting to notice all this
&amp;ldquo;guidelines&amp;rdquo; that worked for me and probably are not going to work to
everybody.&lt;/p&gt;
&lt;p&gt;Some very contradictory points was made by Chad in this presentation,
but I sort of agree based on my current experience with some points,
specially about shared code and treating code as &amp;ldquo;permanent&amp;rdquo;-thing.&lt;/p&gt;
&lt;p&gt;I like the idea to write systems and plan code to be disposable.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The system is the asset, &lt;em&gt;code&lt;/em&gt; is a liability&lt;/p&gt;
&lt;p&gt;Mutability of the system is enhanced by immutability of its components&lt;/p&gt;
&lt;p&gt;Code that works and has never been modified is good code. (???)&lt;/p&gt;
&lt;p&gt;If it hurts, do it more often&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Throw away the system and start over.&lt;/li&gt;
&lt;li&gt;You should plan to throw code away.&lt;/li&gt;
&lt;li&gt;Radically heterogenous environment to not become stuck with preconditions&lt;/li&gt;
&lt;li&gt;No shared code&lt;/li&gt;
&lt;li&gt;Metrics vs Tests&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Linus Torvalds on git</title>
      <link>https://wandersoncferreira.github.io/notes/linus-on-git/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/linus-on-git/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube4xpnkhjaok8&#34;&gt;&lt;a href=&#34;https://youtu.be/4XpnKHJAok8&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Linus Torvals&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s interesting how clear the requirements about a SCM system should
have when Linus talks about it. One day I should experiment another
SCM tool, back at my days in the university we used none of these for
most of the time. Actually, I had to interact with several data files
that would be very nicely done inside a Database but I accessed it
directly from disk. Savages =)&lt;/p&gt;
&lt;p&gt;Interesting to see how people at that audience is not familiar with
something that seems standard to me right now.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The only security work that can be done is through network of trust,
and this should be the only way that development is done as well.&lt;/p&gt;
&lt;p&gt;Distribution means, no one is special.&lt;/p&gt;
&lt;p&gt;Git does not track files, it tracks your contents.&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You might have as many branches as you like&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mercurial&lt;/em&gt; has the same model as git and some differences to
implementation details&lt;/li&gt;
&lt;li&gt;Centralized systems cannot work as well as distributed ones&lt;/li&gt;
&lt;li&gt;Your functions should have names short, sweet and to the point&lt;/li&gt;
&lt;li&gt;You should not have a single repository for every part of your
system. It&amp;rsquo;s better to have a &lt;em&gt;super project&lt;/em&gt; that have pointers to
other git repositories.&lt;/li&gt;
&lt;li&gt;History must always be seens on a project basis&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>SOLID Principles of Object Oriented &amp; Agile Design</title>
      <link>https://wandersoncferreira.github.io/notes/solid-principles/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/solid-principles/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeqhnlmvdxgty&#34;&gt;&lt;a href=&#34;https://youtu.be/QHnLmvDxGTY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Robert &amp;ldquo;Uncle Bob&amp;rdquo; Martin&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I might be walking into undesirable path here, but every presentation
I saw from Uncle Bob was bad. I have to say that, I&amp;rsquo;m now saying that
there is no wisdom in these talks but only that I have to filter so
much unrelated and trivias that makes it difficult and most of the
times boring.&lt;/p&gt;
&lt;p&gt;I like presentations like Linus names his functions: short, sweet and
to the point.&lt;/p&gt;
&lt;p&gt;OO is about managing dependencies so you can prevent fragility and
rigidity&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;The ultimate failure of a software developer is when the &lt;em&gt;business&lt;/em&gt;
prohibits you to make changes to a specific module in the system.&lt;/p&gt;
&lt;p&gt;Three magic words of OO: Encapsulation, Inherintance and Polymorphism&lt;/p&gt;
&lt;h2 id=&#34;principles&#34;&gt;Principles&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;ingle Responsibility: a class should have one single reason to change&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;pen/Closed: modules should be open for extension but closed for modification&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;iskov Substitution: derived classes must be usable through the base class interface&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;nterface segregation: clients should not be forced to depend upon interfaces that they do not use&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;ependency inversion: high-level modules, which provide complex logic, should not depend on low-level modules, which provides utility features. Both should depend on abstractions.&lt;/p&gt;
&lt;h2 id=&#34;recomendations&#34;&gt;Recomendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You don&amp;rsquo;t get fast by written crap&lt;/li&gt;
&lt;li&gt;Inherintance is used in dynamic languages to inherint behaviors
from others&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;extra-links&#34;&gt;Extra links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackify.com/solid-design-principles/&#34;&gt;Solid Design Principles Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>The Future Doesn&#39;t have to be incremental</title>
      <link>https://wandersoncferreira.github.io/notes/future-incremental/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/future-incremental/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubegtaghajco1o&#34;&gt;&lt;a href=&#34;https://youtu.be/gTAghAJcO1o&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Alan Kay, creator of Smalltalk&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Invention and incrementalism is only different from each other by the
size of the jump it provide from current reality. Interesting
definition of instrumentalist and innovators: when a new idea appears,
instrumentalist thinks about how this new thing can &lt;em&gt;improve&lt;/em&gt; their
&lt;em&gt;current&lt;/em&gt; goals, while innovators often &lt;em&gt;rethink&lt;/em&gt; and look for entire
new goals/possibilities.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;For most things, knowledge dominates IQ&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Everybody loves change, except by the &lt;em&gt;change&lt;/em&gt; part&lt;/p&gt;
&lt;p&gt;People hate learning curves&lt;/p&gt;
&lt;p&gt;When something is really new, you can barely see it&lt;/p&gt;
&lt;p&gt;Conscience is only a waken dream with more constrains about the things
that is happening around us&lt;/p&gt;
&lt;p&gt;Problem solving is too small an idea for &lt;em&gt;design and architecture&lt;/em&gt;,
the essential process is &lt;em&gt;problem finding&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We should strive for creations that change the context that we are
used to think&lt;/li&gt;
&lt;li&gt;The Present is the least important time we live in.&lt;/li&gt;
&lt;li&gt;Look at the past as something more broad and sampling the past we
should be able to assemble something really new to the future.&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Back to Basics: Object-Oriented Programming</title>
      <link>https://wandersoncferreira.github.io/notes/back-to-basics/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/back-to-basics/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutube32tdtd9ujce&#34;&gt;&lt;a href=&#34;https://youtu.be/32tDTD9UJCE&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Jon Kalb, Software Instructor&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve being trying to find good modern material about OOP it&amp;rsquo;s very
difficult. I &lt;em&gt;imagine&lt;/em&gt; that OOP has some good lesons about modularity
and composition that might be very good to really master and to apply
in different contexts. I noticed that OOP depends a lot on the
community behind it, I could not find many good &lt;em&gt;same&lt;/em&gt; principles from
Java, C++ and Ruby comminuties. But I am still studying and trying to
understand polymorphism better.&lt;/p&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;OOP: a programming paradigm in C++ using polymorphism based on runtime
function dispatch using virtual functions&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;After the base class guarantees the preconditions and postconditions
of an operation, any derived class must respect those guarantess. An
override can ask for &lt;em&gt;less&lt;/em&gt; and provide &lt;em&gt;more&lt;/em&gt;, but it must never
require more or promise less because that would break the contract
that was promised to calling code.&lt;/p&gt;
&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Coding-Standards-Rules-Guidelines-Practices/dp/0321113586&#34;&gt;From C++ Coding Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Effective-Specific-Improve-Programs-Designs/dp/0321334876/ref=sr_1_1?keywords=effective+c%2B%2B&amp;amp;qid=1577292173&amp;amp;s=books&amp;amp;sr=1-1&#34;&gt;Effective C++: 55 specific ways to improve your programs and designs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Why are so many developers hating on Object-Oriented Programming?&lt;/li&gt;
&lt;li&gt;Make every class in your hierarchy either a base-only or leaf-only&lt;/li&gt;
&lt;li&gt;Give one entity one cohesive responsibility&lt;/li&gt;
&lt;li&gt;Use OOP to model &amp;ldquo;is-a&amp;rdquo; relationships, not for code-reuse&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>A Philosophy of Software Design</title>
      <link>https://wandersoncferreira.github.io/notes/philosophy-software-design/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/philosophy-software-design/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubebmsaylu0ncylistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/bmSAYlu0NcY?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;John Ousterhout, Professor at Stanford&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I already read this book two times and probably I will do many more,
the idea of teaching design to people is very interesting. I like the
idea that software development is in most aspects related to creative
work like painting and music. Specially, the design phase is really
difficult to master and probably to teach as well.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;Working code is not enough&lt;/p&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://extras.springer.com/2002/978-3-642-63970-8/DVD3/rom/pdf/Parnas_new.pdf&#34;&gt;On the Criteria to be Used in Decomposing Systems into Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You need to practice! A lot!&lt;/li&gt;
&lt;li&gt;Define semantics to eliminate exceptions. Minimize the
number of places to handle exceptions&lt;/li&gt;
&lt;li&gt;Try to find big abstraction! Depth is more important than length&lt;/li&gt;
&lt;li&gt;Classes should be deep! Information hiding is good&lt;/li&gt;
&lt;li&gt;Error that people make the most: too many, too small, too shallow classes&lt;/li&gt;
&lt;li&gt;You should make the common case, really really easy&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Design, composition, and performance</title>
      <link>https://wandersoncferreira.github.io/notes/design-composition/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-composition/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubemcz3ygeeupglistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/MCZ3YgeEUPg?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Rich Hickey, Creator of Clojure&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I am currently working in a greenfield project and I will take some
step down and make sure I have all the pieces in place to move
forward. I&amp;rsquo;ve being doing a lot of work to take things apart in this
project, but I need a big picture to address things like
comprehension, coordination, extension, reuse, testing, and
efficiency.&lt;/p&gt;
&lt;p&gt;I have a profound simpathy for this talk because I often engaged in
discussions with colleagues about the situation of practice &lt;em&gt;before&lt;/em&gt;
work in software development. I came from the geophysics industry and
before you touch any equipment or data, you have to be subjected to
tons of training and simulations. Why people learn to code in
production time? I think the problem is even worse because most
managers do not even know that this situation happens, they think that
the team is ready to solve anything. This is scary.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In order to be creative you have to know how to prepare to be creative&lt;/li&gt;
&lt;li&gt;Separating into things that can be composed&lt;/li&gt;
&lt;li&gt;Move from want/need to &lt;em&gt;problems&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Take apart time/order/flow using queues, idempotency, commutation, transactions&lt;/li&gt;
&lt;li&gt;Composition you usually have self-imposed problems/constrains&lt;/li&gt;
&lt;li&gt;Beginners are not yet players&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;+Design+: &lt;em&gt;to prepare the plans for (a work to be executed),
especially to plan the form and structure of&lt;/em&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Clojure Java Interop</title>
      <link>https://wandersoncferreira.github.io/notes/clojure-java-interop/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/clojure-java-interop/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubebvi1bnggp0k&#34;&gt;&lt;a href=&#34;https://youtu.be/bvI1BNgGp0k&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I had to use some pure-Java libraries to deal with XSLX data format
lazily and that was a very simple learning curve for a person that has
never programmed in Java before (me!). For some reason, I had never
thought about using Clojure &lt;em&gt;from&lt;/em&gt; Java.&lt;/p&gt;
&lt;h2 id=&#34;code-nice-examples&#34;&gt;Code Nice Examples&lt;/h2&gt;
&lt;p&gt;Java - Chaining&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAddress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getZipCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Clojure - Chaining&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;.. &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;getAddress&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;getZipCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description> 
    </item>
    
    <item>
      <title>Design after agile, how to succed by trying less</title>
      <link>https://wandersoncferreira.github.io/notes/design-after-agile/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/design-after-agile/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubege_s55uvpyglistplgddwz9ghpmkako9gbvzocobf_bri2ugy&#34;&gt;&lt;a href=&#34;https://youtu.be/GE_s55Uvpyg?list=PLgDdwz9gHpMKAkO9gBvzoCobF_Bri2ugY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I still create several diagrams about portion of my code. After I
discovered &lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; all my diagrams are plain
text files that create the figures as I compile in Emacs, you can even
render on github/gitlab issue tickets &amp;amp; PR&amp;rsquo;s. However, I still need to
be more dilligent to reach these files &lt;em&gt;before&lt;/em&gt; going to
code. Sometimes I find that experimenting with real code helps me to
see clearer and sometimes is just waste of time. Life is hard, right?&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;plans&lt;/em&gt; are useless, but &lt;em&gt;planning&lt;/em&gt; is indispensable.&lt;/p&gt;
&lt;h2 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make diagrams&lt;/li&gt;
&lt;li&gt;Make tables&lt;/li&gt;
&lt;li&gt;Write prose&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Running with Scissors</title>
      <link>https://wandersoncferreira.github.io/notes/running-with-scissors/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/running-with-scissors/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpsyoutubeqx0-pviyidu&#34;&gt;&lt;a href=&#34;https://youtu.be/Qx0-pViyIDU&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I still have difficult to understand what the sentence &lt;em&gt;&amp;ldquo;your running
program is tangible.&amp;quot;&lt;/em&gt; I never connected to a REPL created by running
a &lt;em&gt;jar&lt;/em&gt; file, but I often have some code running in remote servers
using &lt;em&gt;lein ring server&lt;/em&gt; or something similar which I can navigate
around the namespaces and manipulate the code. I also started to leave
test setup inside a comment block. VERY USEFUL!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Debugging with the Scientific Method</title>
      <link>https://wandersoncferreira.github.io/notes/debugging-with-science/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/notes/debugging-with-science/</guid>
      <description>&lt;h3 id=&#34;youtube-linkhttpswwwyoutubecomwatchvfihu5jxmnbg&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FihU5JxmnBg&#34;&gt;Youtube Link&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;speaker&#34;&gt;Speaker&lt;/h2&gt;
&lt;p&gt;Stuart Halloway, Founder of Cognitect&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I am running closely the support team at my company today and the
number of findings you get about software and people interactions is
incredible. I first didn&amp;rsquo;t like the position at all, but I was not
really understanding what was happening. The evolution of a system
with your business is very complex and interesting with tons of
knowledge to take on for future products.&lt;/p&gt;
&lt;h2 id=&#34;quotes&#34;&gt;Quotes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;If you don&amp;rsquo;t know where you are going, you might wind up someplace
else&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Weak &lt;em&gt;science&lt;/em&gt; is &lt;em&gt;stronger&lt;/em&gt; than &lt;em&gt;strong tools&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;_a-thousand-dollar-slide_&#34;&gt;&lt;em&gt;A thousand dollar slide&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Problem statements; &lt;strong&gt;steps&lt;/strong&gt; you took, what you &lt;strong&gt;expected&lt;/strong&gt;, what
&lt;strong&gt;actually&lt;/strong&gt; happened&lt;/p&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Why-Programs-Fail-Systematic-Debugging/dp/0123745152&#34;&gt;Why Programs Fail - A guide to systematic debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Structure-Scientific-Revolutions-50th-Anniversary/dp/0226458121/ref=sr_1_1?keywords=The+Structure+of+Scientific+Revolutions&amp;amp;qid=1577230210&amp;amp;s=books&amp;amp;sr=1-1&#34;&gt;The Structure of Scientific Revolutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Bell-Curve-Intelligence-Structure-Paperbacks/dp/0684824299/ref=sr_1_1?crid=1ZMFQ6J74SBPP&amp;amp;keywords=the+bell+curve&amp;amp;qid=1577230237&amp;amp;s=books&amp;amp;sprefix=the+bell+curve%2Cstripbooks-intl-ship%2C320&amp;amp;sr=1-1&#34;&gt;The Bell Curve&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description> 
    </item>
    
    <item>
      <title>Smarter, not harder: Memoization</title>
      <link>https://wandersoncferreira.github.io/blog/smarter-not-harder/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 -0300</pubDate>
      
      <guid>https://wandersoncferreira.github.io/blog/smarter-not-harder/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m reading the Neal&amp;rsquo;s Ford book Functional Thinking and now the whole
idea of functional paradigm is becoming clearer. The whole idea of
functional programming (FP) today is to be able to leave acidental
complexities up to the language or the runtime to solve for you. No
one should have to manage memory into your daily work activities. This
kind of problem is not related to your business at all! You are not
being paid to solve it.&lt;/p&gt;
&lt;p&gt;Luckily, most modern languages already have this task completely
handled without your direct intervention.&lt;/p&gt;
&lt;p&gt;There are many situations where this kind of niceties are introduced
into the FP world, for example, if you use the map function in
Clojure, you already gain parallel execution for free at runtime. If
you use higher-order constructs, you enable the runtine to become
smarter and to even rearrange execution in a most appropriate order.&lt;/p&gt;
&lt;p&gt;This it not to say that you should not learn what is going on behind
the scenes, but once you learn it you can use this knowledge in very
succinct way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always learn one level of abstraction underneath you&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, let&amp;rsquo;s explore the memoization mechanism for a second.&lt;/p&gt;
&lt;h2 id=&#34;what-is-memoization&#34;&gt;What is memoization?&lt;/h2&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Imagine that you have a function that is very computational intensive,
meaning that you spend most of your execution time to perform your
desired operation on this function. And for your despair, the very
same function is called several times inside your application. How can
we speed this up?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider the task of classifying numbers into perfect, abundant
and deficient accordingly with mathematical definitions of perfect
numbers.&lt;/p&gt;
&lt;p&gt;Example of a Python code to Classify numbers into perfect, abundant
and deficient.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;factors_of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;factors_of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;filtered_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filtered_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_perfect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_abundant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_deficient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, if you want to call this function on the numbers &lt;code&gt;[6, 25, 15000, 56000, 110560]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;56000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;110560&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;The number {} is perfect? {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_perfect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;The number {} is abundant? {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_abundant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;The number {} is deficient? {}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Classifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_deficient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will not probably like the result as the number that you want to
classify gets bigger and bigger. Same funcionality implemented in
Clojure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sum-of-factors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;filter &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rem &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;reduce &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-perfect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum-of-factors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-abundant&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum-of-factors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;is-deficient&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;&amp;lt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sum-of-factors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the same tests calls:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;doseq &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;mi&#34;&gt;15000&lt;/span&gt;, &lt;span class=&#34;mi&#34;&gt;56000&lt;/span&gt;, &lt;span class=&#34;mi&#34;&gt;110560&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;println &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The number &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; is perfect?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;is-perfect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;println &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The number &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; is abundant?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;is-abundant&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;println &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The number &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; is deficient?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;is-deficient&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will not like these results too. As we are not in a speed context
between languages, I will place the time that the Clojure
implementation took to perform these classifications. Example of
results. Showing only the is_perfect test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#34;Elapsed time: 0.122637 msecs&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;s&#34;&gt;&amp;#34;Elapsed time: 0.071203 msecs&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;Elapsed time: 12.583968 msecs&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;56000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;Elapsed time: 32.59634 msecs&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;110560&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Elapsed time: 47.281954 msecs&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to perform all the classifications, the code took 170 msecs.&lt;/p&gt;
&lt;h2 id=&#34;implementing-memoization&#34;&gt;Implementing memoization&lt;/h2&gt;
&lt;p&gt;Ok, we understand the problem now. The whole idea of memoization is to
cache some results in order to gain speed when you compute that value
again. This is very nice and simple: you exchange memory space for
speed. Instead of computing the whole thing again, you will only
perform a lookup into some data structure.&lt;/p&gt;
&lt;p&gt;However, you see functional programming concepts kick-in again. In
order to implement this sort of caching, you need that your function
or method to be pure, in other words, if you pass the same inputs you
always get the same output!&lt;/p&gt;
&lt;p&gt;Implementing caching in Python to simulate memoization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ClassifierCached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;factors_of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;factors_of&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;filtered_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filtered_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_perfect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_abundant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_deficient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_factors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you pay attention, you will see that I haven&amp;rsquo;t done much in order to implement this simple caching mechanism. However, what happened?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have to choose the data structure to store the data (a dictionary sum_cache)&lt;/li&gt;
&lt;li&gt;I have to manage the lookup into the data structure&lt;/li&gt;
&lt;li&gt;I have to manage the population of the data structure&lt;/li&gt;
&lt;li&gt;I have to change the staticmethod functions to become instance methods, because now I have a state to manage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the Clojure version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;kd&#34;&gt;defn- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sum-of-factors-non-cached&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;filter &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rem &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;reduce &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sum-of-factors&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;memoize&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sum-of-factors-non-cached&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I just renamed the old implemented function to become
sum-of-factors-non-cached and created a new one using the function
memoize. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;Now, the whole call cost 80 msecs. As worse as your high-demanding
function become, the clearer become the advantages of
memoization. What&amp;rsquo;s the beauty on the Clojure version? I delegate to
the language all the choices that I had to make in the Python
version. The runtime is taking care of all the details for me.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s keep focused on the business problems we want to solve!!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Y Combinator</title>
      <link>https://wandersoncferreira.github.io/blog/y-combinator/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wandersoncferreira.github.io/blog/y-combinator/</guid>
      <description>&lt;p&gt;The Y combinator is a higher-order function that takes a single
argument, which is a &lt;em&gt;function&lt;/em&gt; that &lt;strong&gt;isn&amp;rsquo;t&lt;/strong&gt; recursive and returns a
version of the same function that &lt;em&gt;is&lt;/em&gt; recursive.&lt;/p&gt;
&lt;p&gt;If that is not enough to blow your mind, please: &lt;em&gt;What do you think
recursion is?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More generally, Y gives us a way to get recursion in a programming
language that supports first-class functions but doesn&amp;rsquo;t have
recursion built in.&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://theburningmonk.com/wp-content/uploads/2017/08/recursion-01.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;This post will be a comprehensive walk through the Chapter 9 of the
Little Schemer book. The idea is to reproduce the same discussion
about recursive functions and get us straight to the &lt;em&gt;Y combinator&lt;/em&gt;
definition. I will also be using &lt;em&gt;Clojure&lt;/em&gt; and borrowing some
explanations from this amazing
&lt;a href=&#34;https://mvanier.livejournal.com/2897.html&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;part-1-partial-functions-and-unnatural-recursion&#34;&gt;Part 1: Partial Functions and Unnatural Recursion&lt;/h2&gt;
&lt;p&gt;Partial functions have this strange property of being correct for
&lt;em&gt;some&lt;/em&gt; input values and to have no guarantees that it will produce the
correct answer to others.&lt;/p&gt;
&lt;p&gt;For example the &lt;code&gt;looking&lt;/code&gt; function below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;looking&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;keep-looking&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;first &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;keep-looking&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;val index &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;new-val&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;get &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;- index &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cond&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;new-val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;not &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;integer?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;new-val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;false&lt;/span&gt;
      &lt;span class=&#34;ss&#34;&gt;:else&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;keep-looking&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;val &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;new-val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Give it a &lt;code&gt;:keyword&lt;/code&gt; and a &lt;code&gt;collection&lt;/code&gt; and the &lt;code&gt;looking&lt;/code&gt; function
will get the first element of the collection and verify if it is equal
to the &lt;code&gt;:keyword&lt;/code&gt; I passed. If true, returns true.&lt;/p&gt;
&lt;p&gt;If false, use the first element of the collection to perform an &lt;code&gt;index&lt;/code&gt;
lookup.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:caviar&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;looking&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:caviar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The path traveled by &lt;code&gt;looking&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;6th index --&amp;gt; 7th index --&amp;gt; 3rd index --&amp;gt; 4th index &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;which is my keyword&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However the following example do not have an answer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lat3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:caviar&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;looking&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:caviar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lat3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The path:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;7th index --&amp;gt; 3rd index --&amp;gt; 2nd index --&amp;gt; 1st index --&amp;gt; 7th index ---&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many functions like this. We are going to use the same class
of functions to develop the idea of the Y combinator.  Why? They
appears when you have the huge constrain of not being able to &lt;code&gt;define&lt;/code&gt;
anything.&lt;/p&gt;
&lt;p&gt;Think about it, if you understand recursion as the technique of
defining some function &lt;em&gt;f&lt;/em&gt; in terms of itself. Then, if you can&amp;rsquo;t
&lt;code&gt;define&lt;/code&gt; the name of the function in your programming language, it
will be &amp;ldquo;&amp;ldquo;impossible&amp;rdquo;&amp;rdquo; to write a recursive call, right?&lt;/p&gt;
&lt;h2 id=&#34;part-2-lets-get-into-it&#34;&gt;Part 2: Let&amp;rsquo;s get into it!&lt;/h2&gt;
&lt;p&gt;We are going to use the &lt;code&gt;length&lt;/code&gt; function below in order to build our
way through the Y Combinator function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;defn &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, without the &lt;code&gt;define&lt;/code&gt; constructor we can&amp;rsquo;t write the name
&lt;code&gt;length&lt;/code&gt; inside the body of the function because there is no way to
refer to the name of this function yet, it will be written as an
anonymous function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We still cannot write a better function to replace &lt;code&gt;?????&lt;/code&gt;, however
the real question is: &lt;em&gt;the function above is all useless?&lt;/em&gt;*&lt;/p&gt;
&lt;p&gt;Actually, not.&lt;/p&gt;
&lt;p&gt;The following call will produce the correct value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;???&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; call with the empty list&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;IF&lt;/em&gt; we could &lt;code&gt;define&lt;/code&gt; the function above, we could called it
&lt;code&gt;length-0&lt;/code&gt; because it correctly returns the length of the empty
list. However, is also possible to use this new &lt;code&gt;length-0&lt;/code&gt; function to
write a new version which returns the correct answer to a list with
only &lt;em&gt;one&lt;/em&gt; element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length-0&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length-0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But, let&amp;rsquo;s pretend we can&amp;rsquo;t use &lt;code&gt;define&lt;/code&gt; here, so the last function
will become (I am only doing a substitution of the &lt;code&gt;length-0&lt;/code&gt;
function):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, let&amp;rsquo;s pay attention to the function above.&lt;/p&gt;
&lt;p&gt;It cannot only answer correctly the length of a list with a single
item, also correctly answers when the input list is &lt;em&gt;UP to 1
element&lt;/em&gt;. Therefore the empty list will also return the correct value.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s take another step on that direction, let&amp;rsquo;s build the
function that will return correctly when the input is &lt;em&gt;UP to 2
elements&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UP to 3 elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                  &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UP to 4 elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                  &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                            &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now, Friedman asks you:&lt;/p&gt;
&lt;h2 id=&#34;now-what-do-you-think-recursion-is&#34;&gt;Now, what do you think recursion is?&lt;/h2&gt;
&lt;p&gt;and that is a tough question.&lt;/p&gt;
&lt;p&gt;Looks like if you pile a lot of &amp;ldquo;incomplete&amp;rdquo; functions that &lt;em&gt;for some&lt;/em&gt;
primitive values returns the correct answer, we can get along just
fine.&lt;/p&gt;
&lt;p&gt;Following this example, it looks like we could compute the length of
any list if we knew beforehand the size of the list and we could pile
the exact amount of &lt;em&gt;incomplete&lt;/em&gt; functions ahead of time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Crazy.. if you knew the size, you could pile the exact same amount of
stacks to compute the size recursively. How nice is that&amp;hellip; o.O&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s organize the code above and abstract the &lt;code&gt;?????&lt;/code&gt; function from
the implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
 &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, the function above is important&amp;hellip;It is another version of the
&lt;code&gt;length-0&lt;/code&gt; function. The only difference here is that: &lt;strong&gt;as I don&amp;rsquo;t know
the function &lt;code&gt;?????&lt;/code&gt;, it could be &amp;ldquo;anything&amp;rdquo;, so I will abstract that
&lt;em&gt;out&lt;/em&gt; of my main function and receive it as an argument&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main-function&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; got it?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, the new versions of the length up to 2 and 3 elements will be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; length-1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;


 &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func2-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func2-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;;; length-2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;


 &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func2-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func2-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;


  &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func3-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func3-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;;; length-3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;


 &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func2-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func2-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;


  &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func3-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func3-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;

   &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func4-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;func4-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s try to remove all the repetition above, let&amp;rsquo;s rewrite the
&lt;code&gt;length-0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s follow the calls of the function above in order to see how it
works to compute the length of the EMPTY list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; the first parenthesis has 2 main blocks:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; the function - Let&amp;#39;s call it func0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; and the argument. Let&amp;#39;s call it arg0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;;; so the first call will be (func0 arg0)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;;; ok, now he will have the second level of calls&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; (arg0 ?????)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; however, this level expand to another function like:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;?????&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; behold.. this is our first version of `length-0`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, take some time to process this new notation. It only gets worse.&lt;/p&gt;
&lt;p&gt;Now, how can we write the &lt;code&gt;length-1&lt;/code&gt; and &lt;code&gt;length-2&lt;/code&gt; using the concise
definition above?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; length-1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;;; func&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

 &lt;span class=&#34;c1&#34;&gt;;; arg&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;;; length-2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;;; func&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

 &lt;span class=&#34;c1&#34;&gt;;; arg&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait a second&amp;hellip; what just happened? It looks like the amount of
levels we need to build &lt;em&gt;DOES NOT DEPEND OF THE TASK AT
HAND&lt;/em&gt;. WoW.. we factor out the &lt;code&gt;length&lt;/code&gt;-specific portion of the code
and we started to pile up some sort of stack of incomplete calls.&lt;/p&gt;
&lt;p&gt;Up to this point, everything was fine. Now, the magic starts to kick-in.
The problem at hand is that we don&amp;rsquo;t know beforehand how many calls of
&lt;code&gt;mk-length&lt;/code&gt; we will need to do when we receive any list to perform the
&lt;code&gt;length&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;If we choose a lower number of &lt;code&gt;mk-length&lt;/code&gt; to perform the &lt;code&gt;length&lt;/code&gt;
task, we will receive an error because it will try to call the &lt;code&gt;?????&lt;/code&gt;
function by passing the argument &lt;code&gt;(rest coll)&lt;/code&gt; to it, but &lt;code&gt;?????&lt;/code&gt; does
not exist. &amp;hellip; Friedman suggests&amp;hellip; let&amp;rsquo;s substitute the function
&lt;code&gt;?????&lt;/code&gt;  for another call of &lt;code&gt;mk-length&lt;/code&gt;&amp;hellip; :X&amp;hellip;. :X &amp;hellip; afterwards
&lt;code&gt;mk-length&lt;/code&gt; creates another &amp;ldquo;stack of calls&amp;rdquo; to enable us to compute
one extra element in the list.&lt;/p&gt;
&lt;p&gt;Ok&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Now, the &lt;code&gt;length-0&lt;/code&gt; will become:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, if we apply &lt;code&gt;mk-length&lt;/code&gt; one time, we will have &lt;code&gt;length-1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;?????&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code is working equivalently to &lt;code&gt;length-1&lt;/code&gt;, but it will
failed for a list with 2 elements. However, let&amp;rsquo;s get wild. &lt;em&gt;keep
passing &lt;code&gt;mk-length&lt;/code&gt; to itself&amp;hellip;&lt;/em&gt;, you will create as many frames as
you need&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;;; func0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;;; arg0&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Are you kidding me&amp;hellip; there is a problem though. The second function,
&lt;code&gt;arg0&lt;/code&gt; in the comments above, does not remember the function that
actually computes the &lt;code&gt;length&lt;/code&gt; operation as we started.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s get rid of the &lt;code&gt;(mk-length mk-length)&lt;/code&gt; call in there. Just
add another layer of function call and abstract that away.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, if you run the code above.. it will give you an
&lt;code&gt;StackOverflow Error&lt;/code&gt; because you are applying &lt;code&gt;mk-length&lt;/code&gt; to itself
indefinitely. What you need to do is a &amp;ldquo;lazy&amp;rdquo; call, only call it when
needed. So you must wrap it under another function call layer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alright, the next step is just re-arranging the code to factor out the
portion of the code that is related to the &lt;code&gt;length&lt;/code&gt; operation that we
desire.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;;;func0&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;non-recursive-func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;non-recursive-func&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mk-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mk-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;

 &lt;span class=&#34;c1&#34;&gt;;;; arg0&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;empty?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;inc &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rest &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congratulations&amp;hellip; &lt;code&gt;func0&lt;/code&gt; above is the Y combinator function. It
receives one function and return another function which is recursive.&lt;/p&gt;
&lt;p&gt;Changing the name of the variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Y&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;non-recursive-func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;non-recursive-func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This chapter of The Little Schemer could not have ended better:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: Do you now know why Y works?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: Read this chapter just one more time and you will.&lt;/strong&gt;&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Project 1</title>
      <link>https://wandersoncferreira.github.io/projects/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wandersoncferreira.github.io/projects/project1/</guid>
      <description>&lt;p&gt;Tresto&lt;/p&gt;
&lt;h2 id=&#34;links-to-this-note&#34;&gt;Links to this note&lt;/h2&gt;
</description> 
    </item>
    
  </channel>
</rss>
